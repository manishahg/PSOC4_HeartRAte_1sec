ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.10
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 2


  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.section	.text.ADC_Init,"ax",%progbits
  74              		.align	2
  75              		.global	ADC_Init
  76              		.code	16
  77              		.thumb_func
  78              		.type	ADC_Init, %function
  79              	ADC_Init:
  80              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 4


  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  81              		.loc 1 95 0
  82              		.cfi_startproc
  83 0000 90B5     		push	{r4, r7, lr}
  84              		.cfi_def_cfa_offset 12
  85              		.cfi_offset 4, -12
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 85B0     		sub	sp, sp, #20
  89              		.cfi_def_cfa_offset 32
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 137:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 5


 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  92              		.loc 1 140 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  96              		.loc 1 141 0
  97 000e 544B     		ldr	r3, .L17
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 101              		.loc 1 145 0
 102 0018 524B     		ldr	r3, .L17+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 105              		.loc 1 146 0
 106 001e 524B     		ldr	r3, .L17+8
 107 0020 514A     		ldr	r2, .L17+8
 108 0022 1168     		ldr	r1, [r2]
 147:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 148:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 109              		.loc 1 148 0
 110 0024 514A     		ldr	r2, .L17+12
 111 0026 1268     		ldr	r2, [r2]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 112              		.loc 1 146 0
 113 0028 002A     		cmp	r2, #0
 114 002a 01DA     		bge	.L6
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 146 0 is_stmt 0 discriminator 1
 116 002c 504A     		ldr	r2, .L17+16
 117 002e 00E0     		b	.L7
 118              	.L6:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 119              		.loc 1 146 0 discriminator 2
 120 0030 504A     		ldr	r2, .L17+20
 121              	.L7:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 122              		.loc 1 146 0 discriminator 3
 123 0032 0A43     		orr	r2, r1
 124 0034 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 125              		.loc 1 150 0 is_stmt 1 discriminator 3
 126 0036 504B     		ldr	r3, .L17+24
 127 0038 504A     		ldr	r2, .L17+28
 128 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 129              		.loc 1 151 0 discriminator 3
 130 003c 504B     		ldr	r3, .L17+32
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 6


 131 003e 514A     		ldr	r2, .L17+36
 132 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 133              		.loc 1 152 0 discriminator 3
 134 0042 514B     		ldr	r3, .L17+40
 135 0044 0022     		mov	r2, #0
 136 0046 1A60     		str	r2, [r3]
 153:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 137              		.loc 1 153 0 discriminator 3
 138 0048 504B     		ldr	r3, .L17+44
 139 004a 514A     		ldr	r2, .L17+48
 140 004c 1A60     		str	r2, [r3]
 154:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 141              		.loc 1 154 0 discriminator 3
 142 004e 514B     		ldr	r3, .L17+52
 143 0050 4F4A     		ldr	r2, .L17+48
 144 0052 1A60     		str	r2, [r3]
 155:.\Generated_Source\PSoC4/ADC.c ****     
 156:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 157:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 158:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 145              		.loc 1 158 0 discriminator 3
 146 0054 504B     		ldr	r3, .L17+56
 147 0056 504A     		ldr	r2, .L17+56
 148 0058 1268     		ldr	r2, [r2]
 149 005a 8021     		mov	r1, #128
 150 005c 4902     		lsl	r1, r1, #9
 151 005e 0A43     		orr	r2, r1
 152 0060 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 160:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 161:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 162:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 163:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 164:.\Generated_Source\PSoC4/ADC.c **** 
 165:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 153              		.loc 1 165 0 discriminator 3
 154 0062 4E4B     		ldr	r3, .L17+60
 155 0064 0022     		mov	r2, #0
 156 0066 1A60     		str	r2, [r3]
 166:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 157              		.loc 1 166 0 discriminator 3
 158 0068 4D4B     		ldr	r3, .L17+64
 159 006a 0022     		mov	r2, #0
 160 006c 1A60     		str	r2, [r3]
 167:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 161              		.loc 1 167 0 discriminator 3
 162 006e 4D4B     		ldr	r3, .L17+68
 163 0070 0122     		mov	r2, #1
 164 0072 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c **** 
 169:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 170:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 171:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 172:.\Generated_Source\PSoC4/ADC.c **** 
 173:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 174:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 7


 165              		.loc 1 174 0 discriminator 3
 166 0074 4C4B     		ldr	r3, .L17+72
 167 0076 1B68     		ldr	r3, [r3]
 168 0078 7B60     		str	r3, [r7, #4]
 175:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 169              		.loc 1 175 0 discriminator 3
 170 007a 7A68     		ldr	r2, [r7, #4]
 171 007c 4B4B     		ldr	r3, .L17+76
 172 007e 1340     		and	r3, r2
 173 0080 7B60     		str	r3, [r7, #4]
 176:.\Generated_Source\PSoC4/ADC.c ****     
 177:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 178:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 179:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 180:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 181:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 182:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 183:.\Generated_Source\PSoC4/ADC.c ****     #else
 184:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 185:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #else
 188:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 174              		.loc 1 188 0 discriminator 3
 175 0082 7B68     		ldr	r3, [r7, #4]
 176 0084 8022     		mov	r2, #128
 177 0086 9205     		lsl	r2, r2, #22
 178 0088 1343     		orr	r3, r2
 179 008a 7B60     		str	r3, [r7, #4]
 189:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 180              		.loc 1 189 0 discriminator 3
 181 008c 7B68     		ldr	r3, [r7, #4]
 182 008e 0122     		mov	r2, #1
 183 0090 9343     		bic	r3, r2
 184 0092 7B60     		str	r3, [r7, #4]
 190:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 191:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 192:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 193:.\Generated_Source\PSoC4/ADC.c ****     
 194:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 185              		.loc 1 194 0 discriminator 3
 186 0094 444B     		ldr	r3, .L17+72
 187 0096 7A68     		ldr	r2, [r7, #4]
 188 0098 1A60     		str	r2, [r3]
 195:.\Generated_Source\PSoC4/ADC.c **** 
 196:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 197:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 198:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 199:.\Generated_Source\PSoC4/ADC.c **** 
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 189              		.loc 1 200 0 discriminator 3
 190 009a 0023     		mov	r3, #0
 191 009c FB60     		str	r3, [r7, #12]
 192 009e 58E0     		b	.L8
 193              	.L16:
 201:.\Generated_Source\PSoC4/ADC.c ****     {
 202:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 8


 194              		.loc 1 202 0
 195 00a0 0022     		mov	r2, #0
 196 00a2 DC23     		mov	r3, #220
 197 00a4 9B01     		lsl	r3, r3, #6
 198 00a6 1340     		and	r3, r2
 199 00a8 7B60     		str	r3, [r7, #4]
 203:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 204:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 205:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 206:.\Generated_Source\PSoC4/ADC.c ****         
 207:.\Generated_Source\PSoC4/ADC.c ****         
 208:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 209:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 210:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 211:.\Generated_Source\PSoC4/ADC.c ****         */
 212:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 213:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 214:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 215:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 216:.\Generated_Source\PSoC4/ADC.c **** 
 217:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 218:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 219:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 220:.\Generated_Source\PSoC4/ADC.c ****         {
 221:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 200              		.loc 1 221 0
 201 00aa FB68     		ldr	r3, [r7, #12]
 202 00ac 9B00     		lsl	r3, r3, #2
 203 00ae 404A     		ldr	r2, .L17+80
 204 00b0 9B18     		add	r3, r3, r2
 205 00b2 7A68     		ldr	r2, [r7, #4]
 206 00b4 1A60     		str	r2, [r3]
 222:.\Generated_Source\PSoC4/ADC.c **** 
 223:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 207              		.loc 1 223 0
 208 00b6 0022     		mov	r2, #0
 209 00b8 0123     		mov	r3, #1
 210 00ba 1340     		and	r3, r2
 211 00bc 0AD0     		beq	.L9
 224:.\Generated_Source\PSoC4/ADC.c ****             {
 225:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 212              		.loc 1 225 0
 213 00be 374B     		ldr	r3, .L17+60
 214 00c0 364A     		ldr	r2, .L17+60
 215 00c2 1168     		ldr	r1, [r2]
 216 00c4 FA68     		ldr	r2, [r7, #12]
 217 00c6 0120     		mov	r0, #1
 218 00c8 041C     		mov	r4, r0
 219 00ca 9440     		lsl	r4, r4, r2
 220 00cc 221C     		mov	r2, r4
 221 00ce 92B2     		uxth	r2, r2
 222 00d0 0A43     		orr	r2, r1
 223 00d2 1A60     		str	r2, [r3]
 224              	.L9:
 226:.\Generated_Source\PSoC4/ADC.c ****             }
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 9


 225              		.loc 1 228 0
 226 00d4 0022     		mov	r2, #0
 227 00d6 0223     		mov	r3, #2
 228 00d8 1340     		and	r3, r2
 229 00da 0AD0     		beq	.L10
 229:.\Generated_Source\PSoC4/ADC.c ****             {
 230:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 230              		.loc 1 230 0
 231 00dc 304B     		ldr	r3, .L17+64
 232 00de 304A     		ldr	r2, .L17+64
 233 00e0 1168     		ldr	r1, [r2]
 234 00e2 FA68     		ldr	r2, [r7, #12]
 235 00e4 0120     		mov	r0, #1
 236 00e6 041C     		mov	r4, r0
 237 00e8 9440     		lsl	r4, r4, r2
 238 00ea 221C     		mov	r2, r4
 239 00ec 92B2     		uxth	r2, r2
 240 00ee 0A43     		orr	r2, r1
 241 00f0 1A60     		str	r2, [r3]
 242              	.L10:
 231:.\Generated_Source\PSoC4/ADC.c ****             }
 232:.\Generated_Source\PSoC4/ADC.c ****         }
 233:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 234:.\Generated_Source\PSoC4/ADC.c ****             else
 235:.\Generated_Source\PSoC4/ADC.c ****             {
 236:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 237:.\Generated_Source\PSoC4/ADC.c **** 
 238:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 239:.\Generated_Source\PSoC4/ADC.c ****                 {
 240:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 241:.\Generated_Source\PSoC4/ADC.c ****                 }
 242:.\Generated_Source\PSoC4/ADC.c **** 
 243:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 244:.\Generated_Source\PSoC4/ADC.c ****                 {
 245:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 246:.\Generated_Source\PSoC4/ADC.c ****                 }
 247:.\Generated_Source\PSoC4/ADC.c ****             }
 248:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 249:.\Generated_Source\PSoC4/ADC.c **** 
 250:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 243              		.loc 1 250 0
 244 00f2 0022     		mov	r2, #0
 245 00f4 8023     		mov	r3, #128
 246 00f6 9B00     		lsl	r3, r3, #2
 247 00f8 1340     		and	r3, r2
 248 00fa 03D0     		beq	.L11
 251:.\Generated_Source\PSoC4/ADC.c ****         {
 252:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 249              		.loc 1 252 0
 250 00fc 8023     		mov	r3, #128
 251 00fe 5B00     		lsl	r3, r3, #1
 252 0100 BB60     		str	r3, [r7, #8]
 253 0102 02E0     		b	.L12
 254              	.L11:
 253:.\Generated_Source\PSoC4/ADC.c ****         }
 254:.\Generated_Source\PSoC4/ADC.c ****         else
 255:.\Generated_Source\PSoC4/ADC.c ****         {
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 10


 256:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 255              		.loc 1 256 0
 256 0104 8023     		mov	r3, #128
 257 0106 5B01     		lsl	r3, r3, #5
 258 0108 BB60     		str	r3, [r7, #8]
 259              	.L12:
 257:.\Generated_Source\PSoC4/ADC.c ****         }
 258:.\Generated_Source\PSoC4/ADC.c **** 
 259:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 260              		.loc 1 259 0
 261 010a 0022     		mov	r2, #0
 262 010c 8023     		mov	r3, #128
 263 010e 5B00     		lsl	r3, r3, #1
 264 0110 1340     		and	r3, r2
 265 0112 05D1     		bne	.L13
 260:.\Generated_Source\PSoC4/ADC.c ****         {
 261:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 262:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 263:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 264:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 265:.\Generated_Source\PSoC4/ADC.c ****             #else
 266:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 266              		.loc 1 266 0
 267 0114 274B     		ldr	r3, .L17+84
 268 0116 FA68     		ldr	r2, [r7, #12]
 269 0118 5200     		lsl	r2, r2, #1
 270 011a 0021     		mov	r1, #0
 271 011c D152     		strh	r1, [r2, r3]
 272 011e 04E0     		b	.L14
 273              	.L13:
 267:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 268:.\Generated_Source\PSoC4/ADC.c ****         }
 269:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 270:.\Generated_Source\PSoC4/ADC.c ****         {
 271:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 272:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 273:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 274:.\Generated_Source\PSoC4/ADC.c ****             #else
 275:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 274              		.loc 1 275 0
 275 0120 244B     		ldr	r3, .L17+84
 276 0122 FA68     		ldr	r2, [r7, #12]
 277 0124 5200     		lsl	r2, r2, #1
 278 0126 0021     		mov	r1, #0
 279 0128 D152     		strh	r1, [r2, r3]
 280              	.L14:
 276:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 277:.\Generated_Source\PSoC4/ADC.c ****         }
 278:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 281              		.loc 1 279 0
 282 012a BB68     		ldr	r3, [r7, #8]
 283 012c 224A     		ldr	r2, .L17+88
 284 012e 5343     		mul	r3, r2
 285 0130 8022     		mov	r2, #128
 286 0132 D200     		lsl	r2, r2, #3
 287 0134 9B18     		add	r3, r3, r2
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 11


 280:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 288              		.loc 1 280 0
 289 0136 002B     		cmp	r3, #0
 290 0138 01DA     		bge	.L15
 291 013a 204C     		ldr	r4, .L17+92
 292 013c 1B19     		add	r3, r3, r4
 293              	.L15:
 294 013e DB12     		asr	r3, r3, #11
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 295              		.loc 1 279 0
 296 0140 9BB2     		uxth	r3, r3
 297 0142 19B2     		sxth	r1, r3
 298 0144 1E4B     		ldr	r3, .L17+96
 299 0146 FA68     		ldr	r2, [r7, #12]
 300 0148 9200     		lsl	r2, r2, #2
 301 014a D150     		str	r1, [r2, r3]
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 302              		.loc 1 200 0
 303 014c FB68     		ldr	r3, [r7, #12]
 304 014e 0133     		add	r3, r3, #1
 305 0150 FB60     		str	r3, [r7, #12]
 306              	.L8:
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 307              		.loc 1 200 0 is_stmt 0 discriminator 1
 308 0152 FB68     		ldr	r3, [r7, #12]
 309 0154 002B     		cmp	r3, #0
 310 0156 A3D0     		beq	.L16
 281:.\Generated_Source\PSoC4/ADC.c ****     }
 282:.\Generated_Source\PSoC4/ADC.c **** }
 311              		.loc 1 282 0 is_stmt 1
 312 0158 BD46     		mov	sp, r7
 313 015a 05B0     		add	sp, sp, #20
 314              		@ sp needed
 315 015c 90BD     		pop	{r4, r7, pc}
 316              	.L18:
 317 015e C046     		.align	2
 318              	.L17:
 319 0160 00000000 		.word	ADC_ISR
 320 0164 20003A40 		.word	1077542944
 321 0168 00003A40 		.word	1077542912
 322 016c 80033A40 		.word	1077543808
 323 0170 C0021051 		.word	1360003776
 324 0174 C0020051 		.word	1358955200
 325 0178 04003A40 		.word	1077542916
 326 017c 8C000A80 		.word	-2146828148
 327 0180 18003A40 		.word	1077542936
 328 0184 0000FF07 		.word	134152192
 329 0188 1C003A40 		.word	1077542940
 330 018c 10003A40 		.word	1077542928
 331 0190 04000400 		.word	262148
 332 0194 14003A40 		.word	1077542932
 333 0198 00033A40 		.word	1077543680
 334 019c 28023A40 		.word	1077543464
 335 01a0 38023A40 		.word	1077543480
 336 01a4 18023A40 		.word	1077543448
 337 01a8 30003A40 		.word	1077542960
 338 01ac FFFFFFDF 		.word	-536870913
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 12


 339 01b0 80003A40 		.word	1077543040
 340 01b4 00000000 		.word	ADC_offset
 341 01b8 10270000 		.word	10000
 342 01bc FF070000 		.word	2047
 343 01c0 00000000 		.word	ADC_countsPer10Volt
 344              		.cfi_endproc
 345              	.LFE3:
 346              		.size	ADC_Init, .-ADC_Init
 347              		.section	.text.ADC_Enable,"ax",%progbits
 348              		.align	2
 349              		.global	ADC_Enable
 350              		.code	16
 351              		.thumb_func
 352              		.type	ADC_Enable, %function
 353              	ADC_Enable:
 354              	.LFB4:
 283:.\Generated_Source\PSoC4/ADC.c **** 
 284:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 285:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 286:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 289:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** * Return:
 295:.\Generated_Source\PSoC4/ADC.c **** *  None.
 296:.\Generated_Source\PSoC4/ADC.c **** *
 297:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 298:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 299:.\Generated_Source\PSoC4/ADC.c **** {
 355              		.loc 1 299 0
 356              		.cfi_startproc
 357 0000 80B5     		push	{r7, lr}
 358              		.cfi_def_cfa_offset 8
 359              		.cfi_offset 7, -8
 360              		.cfi_offset 14, -4
 361 0002 00AF     		add	r7, sp, #0
 362              		.cfi_def_cfa_register 7
 300:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 363              		.loc 1 300 0
 364 0004 0A4B     		ldr	r3, .L22
 365 0006 1B68     		ldr	r3, [r3]
 366 0008 002B     		cmp	r3, #0
 367 000a 0EDB     		blt	.L19
 301:.\Generated_Source\PSoC4/ADC.c ****     {
 302:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 303:.\Generated_Source\PSoC4/ADC.c **** 
 304:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 368              		.loc 1 304 0
 369 000c C046     		mov	r8, r8
 370              	.L21:
 371              		.loc 1 304 0 is_stmt 0 discriminator 1
 372 000e 094B     		ldr	r3, .L22+4
 373 0010 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 13


 374 0012 002B     		cmp	r3, #0
 375 0014 FBDB     		blt	.L21
 305:.\Generated_Source\PSoC4/ADC.c ****             {
 306:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 307:.\Generated_Source\PSoC4/ADC.c ****             }
 308:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 309:.\Generated_Source\PSoC4/ADC.c ****         
 310:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 376              		.loc 1 310 0 is_stmt 1
 377 0016 064B     		ldr	r3, .L22
 378 0018 054A     		ldr	r2, .L22
 379 001a 1268     		ldr	r2, [r2]
 380 001c 8021     		mov	r1, #128
 381 001e 0906     		lsl	r1, r1, #24
 382 0020 0A43     		orr	r2, r1
 383 0022 1A60     		str	r2, [r3]
 311:.\Generated_Source\PSoC4/ADC.c ****         
 312:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 313:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 384              		.loc 1 313 0
 385 0024 0A20     		mov	r0, #10
 386 0026 FFF7FEFF 		bl	CyDelayUs
 387              	.L19:
 314:.\Generated_Source\PSoC4/ADC.c ****     }
 315:.\Generated_Source\PSoC4/ADC.c **** }
 388              		.loc 1 315 0
 389 002a BD46     		mov	sp, r7
 390              		@ sp needed
 391 002c 80BD     		pop	{r7, pc}
 392              	.L23:
 393 002e C046     		.align	2
 394              	.L22:
 395 0030 00003A40 		.word	1077542912
 396 0034 08023A40 		.word	1077543432
 397              		.cfi_endproc
 398              	.LFE4:
 399              		.size	ADC_Enable, .-ADC_Enable
 400              		.section	.text.ADC_Stop,"ax",%progbits
 401              		.align	2
 402              		.global	ADC_Stop
 403              		.code	16
 404              		.thumb_func
 405              		.type	ADC_Stop, %function
 406              	ADC_Stop:
 407              	.LFB5:
 316:.\Generated_Source\PSoC4/ADC.c **** 
 317:.\Generated_Source\PSoC4/ADC.c **** 
 318:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 320:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 321:.\Generated_Source\PSoC4/ADC.c **** *
 322:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 323:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 324:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 14


 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** * Return:
 330:.\Generated_Source\PSoC4/ADC.c **** *  None.
 331:.\Generated_Source\PSoC4/ADC.c **** *
 332:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 333:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 334:.\Generated_Source\PSoC4/ADC.c **** {
 408              		.loc 1 334 0
 409              		.cfi_startproc
 410 0000 80B5     		push	{r7, lr}
 411              		.cfi_def_cfa_offset 8
 412              		.cfi_offset 7, -8
 413              		.cfi_offset 14, -4
 414 0002 00AF     		add	r7, sp, #0
 415              		.cfi_def_cfa_register 7
 335:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 416              		.loc 1 335 0
 417 0004 034B     		ldr	r3, .L25
 418 0006 034A     		ldr	r2, .L25
 419 0008 1268     		ldr	r2, [r2]
 420 000a 5200     		lsl	r2, r2, #1
 421 000c 5208     		lsr	r2, r2, #1
 422 000e 1A60     		str	r2, [r3]
 336:.\Generated_Source\PSoC4/ADC.c **** }
 423              		.loc 1 336 0
 424 0010 BD46     		mov	sp, r7
 425              		@ sp needed
 426 0012 80BD     		pop	{r7, pc}
 427              	.L26:
 428              		.align	2
 429              	.L25:
 430 0014 00003A40 		.word	1077542912
 431              		.cfi_endproc
 432              	.LFE5:
 433              		.size	ADC_Stop, .-ADC_Stop
 434              		.section	.text.ADC_StartConvert,"ax",%progbits
 435              		.align	2
 436              		.global	ADC_StartConvert
 437              		.code	16
 438              		.thumb_func
 439              		.type	ADC_StartConvert, %function
 440              	ADC_StartConvert:
 441              	.LFB6:
 337:.\Generated_Source\PSoC4/ADC.c **** 
 338:.\Generated_Source\PSoC4/ADC.c **** 
 339:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 340:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 341:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 342:.\Generated_Source\PSoC4/ADC.c **** *
 343:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 344:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 345:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 346:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 347:.\Generated_Source\PSoC4/ADC.c **** *
 348:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 349:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 350:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 15


 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** * Return:
 356:.\Generated_Source\PSoC4/ADC.c **** *  None.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 359:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 360:.\Generated_Source\PSoC4/ADC.c **** {
 442              		.loc 1 360 0
 443              		.cfi_startproc
 444 0000 80B5     		push	{r7, lr}
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 7, -8
 447              		.cfi_offset 14, -4
 448 0002 00AF     		add	r7, sp, #0
 449              		.cfi_def_cfa_register 7
 361:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 362:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 363:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 364:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 450              		.loc 1 364 0
 451 0004 024B     		ldr	r3, .L28
 452 0006 0122     		mov	r2, #1
 453 0008 1A60     		str	r2, [r3]
 365:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** }
 454              		.loc 1 367 0
 455 000a BD46     		mov	sp, r7
 456              		@ sp needed
 457 000c 80BD     		pop	{r7, pc}
 458              	.L29:
 459 000e C046     		.align	2
 460              	.L28:
 461 0010 24003A40 		.word	1077542948
 462              		.cfi_endproc
 463              	.LFE6:
 464              		.size	ADC_StartConvert, .-ADC_StartConvert
 465              		.section	.text.ADC_StopConvert,"ax",%progbits
 466              		.align	2
 467              		.global	ADC_StopConvert
 468              		.code	16
 469              		.thumb_func
 470              		.type	ADC_StopConvert, %function
 471              	ADC_StopConvert:
 472              	.LFB7:
 368:.\Generated_Source\PSoC4/ADC.c **** 
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 371:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 372:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 375:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 376:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 16


 377:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** * Return:
 381:.\Generated_Source\PSoC4/ADC.c **** *  None.
 382:.\Generated_Source\PSoC4/ADC.c **** *
 383:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 384:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 385:.\Generated_Source\PSoC4/ADC.c **** {
 473              		.loc 1 385 0
 474              		.cfi_startproc
 475 0000 80B5     		push	{r7, lr}
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 7, -8
 478              		.cfi_offset 14, -4
 479 0002 00AF     		add	r7, sp, #0
 480              		.cfi_def_cfa_register 7
 386:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 387:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 388:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 389:.\Generated_Source\PSoC4/ADC.c **** }
 481              		.loc 1 389 0
 482 0004 BD46     		mov	sp, r7
 483              		@ sp needed
 484 0006 80BD     		pop	{r7, pc}
 485              		.cfi_endproc
 486              	.LFE7:
 487              		.size	ADC_StopConvert, .-ADC_StopConvert
 488              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 489              		.align	2
 490              		.global	ADC_IsEndConversion
 491              		.code	16
 492              		.thumb_func
 493              		.type	ADC_IsEndConversion, %function
 494              	ADC_IsEndConversion:
 495              	.LFB8:
 390:.\Generated_Source\PSoC4/ADC.c **** 
 391:.\Generated_Source\PSoC4/ADC.c **** 
 392:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 393:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 394:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 395:.\Generated_Source\PSoC4/ADC.c **** *
 396:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 397:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 398:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 399:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 400:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 401:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 402:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 403:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 404:.\Generated_Source\PSoC4/ADC.c **** *
 405:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 406:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 408:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 409:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 410:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 17


 411:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 412:.\Generated_Source\PSoC4/ADC.c **** *
 413:.\Generated_Source\PSoC4/ADC.c **** * Return:
 414:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 415:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 416:.\Generated_Source\PSoC4/ADC.c **** *
 417:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 418:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 419:.\Generated_Source\PSoC4/ADC.c **** {
 496              		.loc 1 419 0
 497              		.cfi_startproc
 498 0000 80B5     		push	{r7, lr}
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 7, -8
 501              		.cfi_offset 14, -4
 502 0002 84B0     		sub	sp, sp, #16
 503              		.cfi_def_cfa_offset 24
 504 0004 00AF     		add	r7, sp, #0
 505              		.cfi_def_cfa_register 7
 506 0006 7860     		str	r0, [r7, #4]
 420:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 507              		.loc 1 420 0
 508 0008 0023     		mov	r3, #0
 509 000a FB60     		str	r3, [r7, #12]
 421:.\Generated_Source\PSoC4/ADC.c **** 
 422:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 510              		.loc 1 422 0
 511 000c 7A68     		ldr	r2, [r7, #4]
 512 000e 0323     		mov	r3, #3
 513 0010 1340     		and	r3, r2
 514 0012 11D0     		beq	.L32
 515              	.L34:
 423:.\Generated_Source\PSoC4/ADC.c ****     {
 424:.\Generated_Source\PSoC4/ADC.c ****         do
 425:.\Generated_Source\PSoC4/ADC.c ****         {
 426:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 516              		.loc 1 426 0 discriminator 1
 517 0014 0B4B     		ldr	r3, .L36
 518 0016 1A68     		ldr	r2, [r3]
 519 0018 0123     		mov	r3, #1
 520 001a 1340     		and	r3, r2
 521 001c FB60     		str	r3, [r7, #12]
 427:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 522              		.loc 1 427 0 discriminator 1
 523 001e FB68     		ldr	r3, [r7, #12]
 524 0020 002B     		cmp	r3, #0
 525 0022 03D1     		bne	.L33
 526 0024 7A68     		ldr	r2, [r7, #4]
 527 0026 0223     		mov	r3, #2
 528 0028 1340     		and	r3, r2
 529 002a F3D1     		bne	.L34
 530              	.L33:
 428:.\Generated_Source\PSoC4/ADC.c **** 
 429:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 531              		.loc 1 429 0
 532 002c FB68     		ldr	r3, [r7, #12]
 533 002e 002B     		cmp	r3, #0
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 18


 534 0030 02D0     		beq	.L32
 430:.\Generated_Source\PSoC4/ADC.c ****         {
 431:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 432:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 535              		.loc 1 432 0
 536 0032 044B     		ldr	r3, .L36
 537 0034 0122     		mov	r2, #1
 538 0036 1A60     		str	r2, [r3]
 539              	.L32:
 433:.\Generated_Source\PSoC4/ADC.c ****         }
 434:.\Generated_Source\PSoC4/ADC.c ****     }
 435:.\Generated_Source\PSoC4/ADC.c **** 
 436:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 437:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 438:.\Generated_Source\PSoC4/ADC.c ****         {
 439:.\Generated_Source\PSoC4/ADC.c ****             do
 440:.\Generated_Source\PSoC4/ADC.c ****             {
 441:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 442:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 443:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 444:.\Generated_Source\PSoC4/ADC.c **** 
 445:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 446:.\Generated_Source\PSoC4/ADC.c ****             {
 447:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 448:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 449:.\Generated_Source\PSoC4/ADC.c ****             }
 450:.\Generated_Source\PSoC4/ADC.c ****         }
 451:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 540              		.loc 1 453 0
 541 0038 FB68     		ldr	r3, [r7, #12]
 454:.\Generated_Source\PSoC4/ADC.c **** }
 542              		.loc 1 454 0
 543 003a 181C     		mov	r0, r3
 544 003c BD46     		mov	sp, r7
 545 003e 04B0     		add	sp, sp, #16
 546              		@ sp needed
 547 0040 80BD     		pop	{r7, pc}
 548              	.L37:
 549 0042 C046     		.align	2
 550              	.L36:
 551 0044 10023A40 		.word	1077543440
 552              		.cfi_endproc
 553              	.LFE8:
 554              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 555              		.section	.text.ADC_GetResult16,"ax",%progbits
 556              		.align	2
 557              		.global	ADC_GetResult16
 558              		.code	16
 559              		.thumb_func
 560              		.type	ADC_GetResult16, %function
 561              	ADC_GetResult16:
 562              	.LFB9:
 455:.\Generated_Source\PSoC4/ADC.c **** 
 456:.\Generated_Source\PSoC4/ADC.c **** 
 457:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 19


 458:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 459:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 462:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 463:.\Generated_Source\PSoC4/ADC.c **** *
 464:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 465:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 466:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** * Return:
 469:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 470:.\Generated_Source\PSoC4/ADC.c **** *
 471:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 472:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 473:.\Generated_Source\PSoC4/ADC.c **** {
 563              		.loc 1 473 0
 564              		.cfi_startproc
 565 0000 80B5     		push	{r7, lr}
 566              		.cfi_def_cfa_offset 8
 567              		.cfi_offset 7, -8
 568              		.cfi_offset 14, -4
 569 0002 84B0     		sub	sp, sp, #16
 570              		.cfi_def_cfa_offset 24
 571 0004 00AF     		add	r7, sp, #0
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 474:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 477:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 574              		.loc 1 477 0
 575 0008 7B68     		ldr	r3, [r7, #4]
 576 000a 002B     		cmp	r3, #0
 577 000c 02D0     		beq	.L39
 578              		.loc 1 477 0 is_stmt 0 discriminator 1
 579 000e 0020     		mov	r0, #0
 580 0010 FFF7FEFF 		bl	CyHalt
 581              	.L39:
 478:.\Generated_Source\PSoC4/ADC.c **** 
 479:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 582              		.loc 1 479 0 is_stmt 1
 583 0014 7B68     		ldr	r3, [r7, #4]
 584 0016 002B     		cmp	r3, #0
 585 0018 08D1     		bne	.L40
 480:.\Generated_Source\PSoC4/ADC.c ****     {
 481:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 586              		.loc 1 481 0
 587 001a 7B68     		ldr	r3, [r7, #4]
 588 001c 9B00     		lsl	r3, r3, #2
 589 001e 084A     		ldr	r2, .L43
 590 0020 9B18     		add	r3, r3, r2
 591 0022 1B68     		ldr	r3, [r3]
 592 0024 1B04     		lsl	r3, r3, #16
 593 0026 1B0C     		lsr	r3, r3, #16
 594 0028 FB60     		str	r3, [r7, #12]
 595 002a 01E0     		b	.L41
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 20


 596              	.L40:
 482:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 483:.\Generated_Source\PSoC4/ADC.c ****     }
 484:.\Generated_Source\PSoC4/ADC.c ****     else
 485:.\Generated_Source\PSoC4/ADC.c ****     {
 486:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 487:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 488:.\Generated_Source\PSoC4/ADC.c ****         #else
 489:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 597              		.loc 1 489 0
 598 002c 0023     		mov	r3, #0
 599 002e FB60     		str	r3, [r7, #12]
 600              	.L41:
 490:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 491:.\Generated_Source\PSoC4/ADC.c ****     }
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 601              		.loc 1 493 0
 602 0030 FB68     		ldr	r3, [r7, #12]
 603 0032 9BB2     		uxth	r3, r3
 604 0034 1BB2     		sxth	r3, r3
 494:.\Generated_Source\PSoC4/ADC.c **** }
 605              		.loc 1 494 0
 606 0036 181C     		mov	r0, r3
 607 0038 BD46     		mov	sp, r7
 608 003a 04B0     		add	sp, sp, #16
 609              		@ sp needed
 610 003c 80BD     		pop	{r7, pc}
 611              	.L44:
 612 003e C046     		.align	2
 613              	.L43:
 614 0040 80013A40 		.word	1077543296
 615              		.cfi_endproc
 616              	.LFE9:
 617              		.size	ADC_GetResult16, .-ADC_GetResult16
 618              		.section	.text.ADC_SetChanMask,"ax",%progbits
 619              		.align	2
 620              		.global	ADC_SetChanMask
 621              		.code	16
 622              		.thumb_func
 623              		.type	ADC_SetChanMask, %function
 624              	ADC_SetChanMask:
 625              	.LFB10:
 495:.\Generated_Source\PSoC4/ADC.c **** 
 496:.\Generated_Source\PSoC4/ADC.c **** 
 497:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 498:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 499:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 502:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 503:.\Generated_Source\PSoC4/ADC.c **** *
 504:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 506:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 507:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 508:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 21


 509:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 510:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 511:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** * Return:
 514:.\Generated_Source\PSoC4/ADC.c **** *  None.
 515:.\Generated_Source\PSoC4/ADC.c **** *
 516:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 517:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 518:.\Generated_Source\PSoC4/ADC.c **** {
 626              		.loc 1 518 0
 627              		.cfi_startproc
 628 0000 80B5     		push	{r7, lr}
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 7, -8
 631              		.cfi_offset 14, -4
 632 0002 82B0     		sub	sp, sp, #8
 633              		.cfi_def_cfa_offset 16
 634 0004 00AF     		add	r7, sp, #0
 635              		.cfi_def_cfa_register 7
 636 0006 7860     		str	r0, [r7, #4]
 519:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 637              		.loc 1 519 0
 638 0008 034B     		ldr	r3, .L46
 639 000a 7968     		ldr	r1, [r7, #4]
 640 000c 0122     		mov	r2, #1
 641 000e 0A40     		and	r2, r1
 642 0010 1A60     		str	r2, [r3]
 520:.\Generated_Source\PSoC4/ADC.c **** }
 643              		.loc 1 520 0
 644 0012 BD46     		mov	sp, r7
 645 0014 02B0     		add	sp, sp, #8
 646              		@ sp needed
 647 0016 80BD     		pop	{r7, pc}
 648              	.L47:
 649              		.align	2
 650              	.L46:
 651 0018 20003A40 		.word	1077542944
 652              		.cfi_endproc
 653              	.LFE10:
 654              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 655              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 656              		.align	2
 657              		.global	ADC_SetLowLimit
 658              		.code	16
 659              		.thumb_func
 660              		.type	ADC_SetLowLimit, %function
 661              	ADC_SetLowLimit:
 662              	.LFB11:
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 523:.\Generated_Source\PSoC4/ADC.c **** 
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 526:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 527:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 528:.\Generated_Source\PSoC4/ADC.c ****     *
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 22


 529:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 536:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 537:.\Generated_Source\PSoC4/ADC.c ****     *
 538:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 539:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 540:.\Generated_Source\PSoC4/ADC.c ****     {
 541:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 542:.\Generated_Source\PSoC4/ADC.c ****     }
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 545:.\Generated_Source\PSoC4/ADC.c **** 
 546:.\Generated_Source\PSoC4/ADC.c **** 
 547:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 548:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 549:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 552:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 555:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** * Return:
 558:.\Generated_Source\PSoC4/ADC.c **** *  None.
 559:.\Generated_Source\PSoC4/ADC.c **** *
 560:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 561:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 562:.\Generated_Source\PSoC4/ADC.c **** {
 663              		.loc 1 562 0
 664              		.cfi_startproc
 665 0000 80B5     		push	{r7, lr}
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 7, -8
 668              		.cfi_offset 14, -4
 669 0002 82B0     		sub	sp, sp, #8
 670              		.cfi_def_cfa_offset 16
 671 0004 00AF     		add	r7, sp, #0
 672              		.cfi_def_cfa_register 7
 673 0006 7860     		str	r0, [r7, #4]
 563:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 674              		.loc 1 563 0
 675 0008 084B     		ldr	r3, .L49
 676 000a 084A     		ldr	r2, .L49
 677 000c 1268     		ldr	r2, [r2]
 678 000e 120C     		lsr	r2, r2, #16
 679 0010 1204     		lsl	r2, r2, #16
 680 0012 1A60     		str	r2, [r3]
 564:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 681              		.loc 1 564 0
 682 0014 054B     		ldr	r3, .L49
 683 0016 054A     		ldr	r2, .L49
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 23


 684 0018 1168     		ldr	r1, [r2]
 685 001a 7A68     		ldr	r2, [r7, #4]
 686 001c 1204     		lsl	r2, r2, #16
 687 001e 120C     		lsr	r2, r2, #16
 688 0020 0A43     		orr	r2, r1
 689 0022 1A60     		str	r2, [r3]
 565:.\Generated_Source\PSoC4/ADC.c **** }
 690              		.loc 1 565 0
 691 0024 BD46     		mov	sp, r7
 692 0026 02B0     		add	sp, sp, #8
 693              		@ sp needed
 694 0028 80BD     		pop	{r7, pc}
 695              	.L50:
 696 002a C046     		.align	2
 697              	.L49:
 698 002c 18003A40 		.word	1077542936
 699              		.cfi_endproc
 700              	.LFE11:
 701              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 702              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 703              		.align	2
 704              		.global	ADC_SetHighLimit
 705              		.code	16
 706              		.thumb_func
 707              		.type	ADC_SetHighLimit, %function
 708              	ADC_SetHighLimit:
 709              	.LFB12:
 566:.\Generated_Source\PSoC4/ADC.c **** 
 567:.\Generated_Source\PSoC4/ADC.c **** 
 568:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 569:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 570:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 573:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 576:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** * Return:
 579:.\Generated_Source\PSoC4/ADC.c **** *  None.
 580:.\Generated_Source\PSoC4/ADC.c **** *
 581:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 582:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 583:.\Generated_Source\PSoC4/ADC.c **** {
 710              		.loc 1 583 0
 711              		.cfi_startproc
 712 0000 80B5     		push	{r7, lr}
 713              		.cfi_def_cfa_offset 8
 714              		.cfi_offset 7, -8
 715              		.cfi_offset 14, -4
 716 0002 82B0     		sub	sp, sp, #8
 717              		.cfi_def_cfa_offset 16
 718 0004 00AF     		add	r7, sp, #0
 719              		.cfi_def_cfa_register 7
 720 0006 7860     		str	r0, [r7, #4]
 584:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 24


 721              		.loc 1 584 0
 722 0008 074B     		ldr	r3, .L52
 723 000a 074A     		ldr	r2, .L52
 724 000c 1268     		ldr	r2, [r2]
 725 000e 1204     		lsl	r2, r2, #16
 726 0010 120C     		lsr	r2, r2, #16
 727 0012 1A60     		str	r2, [r3]
 585:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 728              		.loc 1 585 0
 729 0014 044B     		ldr	r3, .L52
 730 0016 044A     		ldr	r2, .L52
 731 0018 1168     		ldr	r1, [r2]
 732 001a 7A68     		ldr	r2, [r7, #4]
 733 001c 1204     		lsl	r2, r2, #16
 734 001e 0A43     		orr	r2, r1
 735 0020 1A60     		str	r2, [r3]
 586:.\Generated_Source\PSoC4/ADC.c **** }
 736              		.loc 1 586 0
 737 0022 BD46     		mov	sp, r7
 738 0024 02B0     		add	sp, sp, #8
 739              		@ sp needed
 740 0026 80BD     		pop	{r7, pc}
 741              	.L53:
 742              		.align	2
 743              	.L52:
 744 0028 18003A40 		.word	1077542936
 745              		.cfi_endproc
 746              	.LFE12:
 747              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 748              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 749              		.align	2
 750              		.global	ADC_SetLimitMask
 751              		.code	16
 752              		.thumb_func
 753              		.type	ADC_SetLimitMask, %function
 754              	ADC_SetLimitMask:
 755              	.LFB13:
 587:.\Generated_Source\PSoC4/ADC.c **** 
 588:.\Generated_Source\PSoC4/ADC.c **** 
 589:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 590:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 591:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 594:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 595:.\Generated_Source\PSoC4/ADC.c **** *
 596:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 597:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 598:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 599:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 600:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** * Return:
 603:.\Generated_Source\PSoC4/ADC.c **** *  None.
 604:.\Generated_Source\PSoC4/ADC.c **** *
 605:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 606:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 25


 607:.\Generated_Source\PSoC4/ADC.c **** {
 756              		.loc 1 607 0
 757              		.cfi_startproc
 758 0000 80B5     		push	{r7, lr}
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 7, -8
 761              		.cfi_offset 14, -4
 762 0002 82B0     		sub	sp, sp, #8
 763              		.cfi_def_cfa_offset 16
 764 0004 00AF     		add	r7, sp, #0
 765              		.cfi_def_cfa_register 7
 766 0006 7860     		str	r0, [r7, #4]
 608:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 767              		.loc 1 608 0
 768 0008 034B     		ldr	r3, .L55
 769 000a 7968     		ldr	r1, [r7, #4]
 770 000c 0122     		mov	r2, #1
 771 000e 0A40     		and	r2, r1
 772 0010 1A60     		str	r2, [r3]
 609:.\Generated_Source\PSoC4/ADC.c **** }
 773              		.loc 1 609 0
 774 0012 BD46     		mov	sp, r7
 775 0014 02B0     		add	sp, sp, #8
 776              		@ sp needed
 777 0016 80BD     		pop	{r7, pc}
 778              	.L56:
 779              		.align	2
 780              	.L55:
 781 0018 38023A40 		.word	1077543480
 782              		.cfi_endproc
 783              	.LFE13:
 784              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 785              		.section	.text.ADC_SetSatMask,"ax",%progbits
 786              		.align	2
 787              		.global	ADC_SetSatMask
 788              		.code	16
 789              		.thumb_func
 790              		.type	ADC_SetSatMask, %function
 791              	ADC_SetSatMask:
 792              	.LFB14:
 610:.\Generated_Source\PSoC4/ADC.c **** 
 611:.\Generated_Source\PSoC4/ADC.c **** 
 612:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 613:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 614:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 617:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 618:.\Generated_Source\PSoC4/ADC.c **** *
 619:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 620:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 621:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 622:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 623:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Return:
 626:.\Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 26


 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 629:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 630:.\Generated_Source\PSoC4/ADC.c **** {
 793              		.loc 1 630 0
 794              		.cfi_startproc
 795 0000 80B5     		push	{r7, lr}
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 7, -8
 798              		.cfi_offset 14, -4
 799 0002 82B0     		sub	sp, sp, #8
 800              		.cfi_def_cfa_offset 16
 801 0004 00AF     		add	r7, sp, #0
 802              		.cfi_def_cfa_register 7
 803 0006 7860     		str	r0, [r7, #4]
 631:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 804              		.loc 1 631 0
 805 0008 034B     		ldr	r3, .L58
 806 000a 7968     		ldr	r1, [r7, #4]
 807 000c 0122     		mov	r2, #1
 808 000e 0A40     		and	r2, r1
 809 0010 1A60     		str	r2, [r3]
 632:.\Generated_Source\PSoC4/ADC.c **** }
 810              		.loc 1 632 0
 811 0012 BD46     		mov	sp, r7
 812 0014 02B0     		add	sp, sp, #8
 813              		@ sp needed
 814 0016 80BD     		pop	{r7, pc}
 815              	.L59:
 816              		.align	2
 817              	.L58:
 818 0018 28023A40 		.word	1077543464
 819              		.cfi_endproc
 820              	.LFE14:
 821              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 822              		.section	.text.ADC_SetOffset,"ax",%progbits
 823              		.align	2
 824              		.global	ADC_SetOffset
 825              		.code	16
 826              		.thumb_func
 827              		.type	ADC_SetOffset, %function
 828              	ADC_SetOffset:
 829              	.LFB15:
 633:.\Generated_Source\PSoC4/ADC.c **** 
 634:.\Generated_Source\PSoC4/ADC.c **** 
 635:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 636:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 637:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 638:.\Generated_Source\PSoC4/ADC.c **** *
 639:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 640:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 641:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 642:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 643:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 644:.\Generated_Source\PSoC4/ADC.c **** *
 645:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 646:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 27


 647:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 648:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Return:
 651:.\Generated_Source\PSoC4/ADC.c **** *  None.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 654:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 655:.\Generated_Source\PSoC4/ADC.c **** *
 656:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 657:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 658:.\Generated_Source\PSoC4/ADC.c **** {
 830              		.loc 1 658 0
 831              		.cfi_startproc
 832 0000 80B5     		push	{r7, lr}
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 7, -8
 835              		.cfi_offset 14, -4
 836 0002 82B0     		sub	sp, sp, #8
 837              		.cfi_def_cfa_offset 16
 838 0004 00AF     		add	r7, sp, #0
 839              		.cfi_def_cfa_register 7
 840 0006 7860     		str	r0, [r7, #4]
 841 0008 0A1C     		mov	r2, r1
 842 000a BB1C     		add	r3, r7, #2
 843 000c 1A80     		strh	r2, [r3]
 659:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 660:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 844              		.loc 1 660 0
 845 000e 7B68     		ldr	r3, [r7, #4]
 846 0010 002B     		cmp	r3, #0
 847 0012 02D0     		beq	.L61
 848              		.loc 1 660 0 is_stmt 0 discriminator 1
 849 0014 0020     		mov	r0, #0
 850 0016 FFF7FEFF 		bl	CyHalt
 851              	.L61:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 852              		.loc 1 662 0 is_stmt 1
 853 001a 044B     		ldr	r3, .L62
 854 001c 7A68     		ldr	r2, [r7, #4]
 855 001e 5200     		lsl	r2, r2, #1
 856 0020 B91C     		add	r1, r7, #2
 857 0022 0988     		ldrh	r1, [r1]
 858 0024 D152     		strh	r1, [r2, r3]
 663:.\Generated_Source\PSoC4/ADC.c **** }
 859              		.loc 1 663 0
 860 0026 BD46     		mov	sp, r7
 861 0028 02B0     		add	sp, sp, #8
 862              		@ sp needed
 863 002a 80BD     		pop	{r7, pc}
 864              	.L63:
 865              		.align	2
 866              	.L62:
 867 002c 00000000 		.word	ADC_offset
 868              		.cfi_endproc
 869              	.LFE15:
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 28


 870              		.size	ADC_SetOffset, .-ADC_SetOffset
 871              		.section	.text.ADC_SetGain,"ax",%progbits
 872              		.align	2
 873              		.global	ADC_SetGain
 874              		.code	16
 875              		.thumb_func
 876              		.type	ADC_SetGain, %function
 877              	ADC_SetGain:
 878              	.LFB16:
 664:.\Generated_Source\PSoC4/ADC.c **** 
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 667:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 668:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 669:.\Generated_Source\PSoC4/ADC.c **** *
 670:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 671:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 672:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 673:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 674:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 675:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 676:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 677:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 678:.\Generated_Source\PSoC4/ADC.c **** *
 679:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 680:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 681:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Return:
 684:.\Generated_Source\PSoC4/ADC.c **** *  None.
 685:.\Generated_Source\PSoC4/ADC.c **** *
 686:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 687:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 688:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 689:.\Generated_Source\PSoC4/ADC.c **** *
 690:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 691:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 692:.\Generated_Source\PSoC4/ADC.c **** {
 879              		.loc 1 692 0
 880              		.cfi_startproc
 881 0000 80B5     		push	{r7, lr}
 882              		.cfi_def_cfa_offset 8
 883              		.cfi_offset 7, -8
 884              		.cfi_offset 14, -4
 885 0002 82B0     		sub	sp, sp, #8
 886              		.cfi_def_cfa_offset 16
 887 0004 00AF     		add	r7, sp, #0
 888              		.cfi_def_cfa_register 7
 889 0006 7860     		str	r0, [r7, #4]
 890 0008 3960     		str	r1, [r7]
 693:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 694:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 891              		.loc 1 694 0
 892 000a 7B68     		ldr	r3, [r7, #4]
 893 000c 002B     		cmp	r3, #0
 894 000e 02D0     		beq	.L65
 895              		.loc 1 694 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 29


 896 0010 0020     		mov	r0, #0
 897 0012 FFF7FEFF 		bl	CyHalt
 898              	.L65:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 899              		.loc 1 696 0 is_stmt 1
 900 0016 044B     		ldr	r3, .L66
 901 0018 7A68     		ldr	r2, [r7, #4]
 902 001a 9200     		lsl	r2, r2, #2
 903 001c 3968     		ldr	r1, [r7]
 904 001e D150     		str	r1, [r2, r3]
 697:.\Generated_Source\PSoC4/ADC.c **** }
 905              		.loc 1 697 0
 906 0020 BD46     		mov	sp, r7
 907 0022 02B0     		add	sp, sp, #8
 908              		@ sp needed
 909 0024 80BD     		pop	{r7, pc}
 910              	.L67:
 911 0026 C046     		.align	2
 912              	.L66:
 913 0028 00000000 		.word	ADC_countsPer10Volt
 914              		.cfi_endproc
 915              	.LFE16:
 916              		.size	ADC_SetGain, .-ADC_SetGain
 917              		.global	__aeabi_idiv
 918              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 919              		.align	2
 920              		.global	ADC_CountsTo_mVolts
 921              		.code	16
 922              		.thumb_func
 923              		.type	ADC_CountsTo_mVolts, %function
 924              	ADC_CountsTo_mVolts:
 925              	.LFB17:
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 701:.\Generated_Source\PSoC4/ADC.c **** 
 702:.\Generated_Source\PSoC4/ADC.c **** 
 703:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 704:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 705:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 706:.\Generated_Source\PSoC4/ADC.c ****     *
 707:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 708:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 709:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 710:.\Generated_Source\PSoC4/ADC.c ****     *
 711:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 717:.\Generated_Source\PSoC4/ADC.c ****     *
 718:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 720:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 721:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 30


 722:.\Generated_Source\PSoC4/ADC.c ****     *
 723:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 724:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 725:.\Generated_Source\PSoC4/ADC.c ****     {
 926              		.loc 1 725 0
 927              		.cfi_startproc
 928 0000 80B5     		push	{r7, lr}
 929              		.cfi_def_cfa_offset 8
 930              		.cfi_offset 7, -8
 931              		.cfi_offset 14, -4
 932 0002 84B0     		sub	sp, sp, #16
 933              		.cfi_def_cfa_offset 24
 934 0004 00AF     		add	r7, sp, #0
 935              		.cfi_def_cfa_register 7
 936 0006 7860     		str	r0, [r7, #4]
 937 0008 0A1C     		mov	r2, r1
 938 000a BB1C     		add	r3, r7, #2
 939 000c 1A80     		strh	r2, [r3]
 726:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 729:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 940              		.loc 1 729 0
 941 000e 7B68     		ldr	r3, [r7, #4]
 942 0010 002B     		cmp	r3, #0
 943 0012 02D0     		beq	.L69
 944              		.loc 1 729 0 is_stmt 0 discriminator 1
 945 0014 0020     		mov	r0, #0
 946 0016 FFF7FEFF 		bl	CyHalt
 947              	.L69:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 732:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 733:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 734:.\Generated_Source\PSoC4/ADC.c ****             {
 735:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 736:.\Generated_Source\PSoC4/ADC.c ****             }
 737:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 740:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 948              		.loc 1 740 0 is_stmt 1
 949 001a BB1C     		add	r3, r7, #2
 950 001c 1A88     		ldrh	r2, [r3]
 951 001e 1E4B     		ldr	r3, .L75
 952 0020 7968     		ldr	r1, [r7, #4]
 953 0022 4900     		lsl	r1, r1, #1
 954 0024 CB5A     		ldrh	r3, [r1, r3]
 955 0026 9BB2     		uxth	r3, r3
 956 0028 9BB2     		uxth	r3, r3
 957 002a D31A     		sub	r3, r2, r3
 958 002c 9AB2     		uxth	r2, r3
 959 002e BB1C     		add	r3, r7, #2
 960 0030 1A80     		strh	r2, [r3]
 741:.\Generated_Source\PSoC4/ADC.c **** 
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 961              		.loc 1 742 0
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 31


 962 0032 BB1C     		add	r3, r7, #2
 963 0034 0021     		mov	r1, #0
 964 0036 5B5E     		ldrsh	r3, [r3, r1]
 965 0038 184A     		ldr	r2, .L75+4
 966 003a 5A43     		mul	r2, r3
 743:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 967              		.loc 1 743 0
 968 003c BB1C     		add	r3, r7, #2
 969 003e 0021     		mov	r1, #0
 970 0040 5B5E     		ldrsh	r3, [r3, r1]
 971 0042 002B     		cmp	r3, #0
 972 0044 08DD     		ble	.L70
 973              		.loc 1 743 0 is_stmt 0 discriminator 1
 974 0046 164B     		ldr	r3, .L75+8
 975 0048 7968     		ldr	r1, [r7, #4]
 976 004a 8900     		lsl	r1, r1, #2
 977 004c CB58     		ldr	r3, [r1, r3]
 978 004e 002B     		cmp	r3, #0
 979 0050 00DA     		bge	.L71
 980 0052 0133     		add	r3, r3, #1
 981              	.L71:
 982 0054 5B10     		asr	r3, r3, #1
 983 0056 08E0     		b	.L72
 984              	.L70:
 985              		.loc 1 743 0 discriminator 2
 986 0058 114B     		ldr	r3, .L75+8
 987 005a 7968     		ldr	r1, [r7, #4]
 988 005c 8900     		lsl	r1, r1, #2
 989 005e CB58     		ldr	r3, [r1, r3]
 990 0060 002B     		cmp	r3, #0
 991 0062 00DA     		bge	.L73
 992 0064 0133     		add	r3, r3, #1
 993              	.L73:
 994 0066 5B10     		asr	r3, r3, #1
 995 0068 5B42     		neg	r3, r3
 996              	.L72:
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 997              		.loc 1 742 0 is_stmt 1
 998 006a D218     		add	r2, r2, r3
 744:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 999              		.loc 1 744 0
 1000 006c 0C4B     		ldr	r3, .L75+8
 1001 006e 7968     		ldr	r1, [r7, #4]
 1002 0070 8900     		lsl	r1, r1, #2
 1003 0072 CB58     		ldr	r3, [r1, r3]
 1004 0074 101C     		mov	r0, r2
 1005 0076 191C     		mov	r1, r3
 1006 0078 FFF7FEFF 		bl	__aeabi_idiv
 1007 007c 031C     		mov	r3, r0
 1008 007e 1A1C     		mov	r2, r3
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1009              		.loc 1 742 0
 1010 0080 3B1C     		mov	r3, r7
 1011 0082 0E33     		add	r3, r3, #14
 1012 0084 1A80     		strh	r2, [r3]
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 32


 1013              		.loc 1 746 0
 1014 0086 3B1C     		mov	r3, r7
 1015 0088 0E33     		add	r3, r3, #14
 1016 008a 1B88     		ldrh	r3, [r3]
 1017 008c 1BB2     		sxth	r3, r3
 747:.\Generated_Source\PSoC4/ADC.c ****     }
 1018              		.loc 1 747 0
 1019 008e 181C     		mov	r0, r3
 1020 0090 BD46     		mov	sp, r7
 1021 0092 04B0     		add	sp, sp, #16
 1022              		@ sp needed
 1023 0094 80BD     		pop	{r7, pc}
 1024              	.L76:
 1025 0096 C046     		.align	2
 1026              	.L75:
 1027 0098 00000000 		.word	ADC_offset
 1028 009c 10270000 		.word	10000
 1029 00a0 00000000 		.word	ADC_countsPer10Volt
 1030              		.cfi_endproc
 1031              	.LFE17:
 1032              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1033              		.global	__aeabi_lmul
 1034              		.global	__aeabi_ldivmod
 1035              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1036              		.align	2
 1037              		.global	ADC_CountsTo_uVolts
 1038              		.code	16
 1039              		.thumb_func
 1040              		.type	ADC_CountsTo_uVolts, %function
 1041              	ADC_CountsTo_uVolts:
 1042              	.LFB18:
 748:.\Generated_Source\PSoC4/ADC.c **** 
 749:.\Generated_Source\PSoC4/ADC.c **** 
 750:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 751:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 752:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 753:.\Generated_Source\PSoC4/ADC.c ****     *
 754:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 755:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 756:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 757:.\Generated_Source\PSoC4/ADC.c ****     *
 758:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 759:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 760:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 764:.\Generated_Source\PSoC4/ADC.c ****     *
 765:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 766:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 767:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 768:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 769:.\Generated_Source\PSoC4/ADC.c ****     *
 770:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 771:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 772:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 773:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 33


 774:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 775:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 776:.\Generated_Source\PSoC4/ADC.c ****     *
 777:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 778:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 779:.\Generated_Source\PSoC4/ADC.c ****     {
 1043              		.loc 1 779 0
 1044              		.cfi_startproc
 1045 0000 B0B5     		push	{r4, r5, r7, lr}
 1046              		.cfi_def_cfa_offset 16
 1047              		.cfi_offset 4, -16
 1048              		.cfi_offset 5, -12
 1049              		.cfi_offset 7, -8
 1050              		.cfi_offset 14, -4
 1051 0002 86B0     		sub	sp, sp, #24
 1052              		.cfi_def_cfa_offset 40
 1053 0004 00AF     		add	r7, sp, #0
 1054              		.cfi_def_cfa_register 7
 1055 0006 F860     		str	r0, [r7, #12]
 1056 0008 0A1C     		mov	r2, r1
 1057 000a 3B1C     		mov	r3, r7
 1058 000c 0A33     		add	r3, r3, #10
 1059 000e 1A80     		strh	r2, [r3]
 780:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 783:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1060              		.loc 1 783 0
 1061 0010 FB68     		ldr	r3, [r7, #12]
 1062 0012 002B     		cmp	r3, #0
 1063 0014 02D0     		beq	.L78
 1064              		.loc 1 783 0 is_stmt 0 discriminator 1
 1065 0016 0020     		mov	r0, #0
 1066 0018 FFF7FEFF 		bl	CyHalt
 1067              	.L78:
 784:.\Generated_Source\PSoC4/ADC.c **** 
 785:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 786:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 787:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 788:.\Generated_Source\PSoC4/ADC.c ****             {
 789:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 790:.\Generated_Source\PSoC4/ADC.c ****             }
 791:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 794:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1068              		.loc 1 794 0 is_stmt 1
 1069 001c 3B1C     		mov	r3, r7
 1070 001e 0A33     		add	r3, r3, #10
 1071 0020 1A88     		ldrh	r2, [r3]
 1072 0022 1B4B     		ldr	r3, .L80+8
 1073 0024 F968     		ldr	r1, [r7, #12]
 1074 0026 4900     		lsl	r1, r1, #1
 1075 0028 CB5A     		ldrh	r3, [r1, r3]
 1076 002a 9BB2     		uxth	r3, r3
 1077 002c 9BB2     		uxth	r3, r3
 1078 002e D31A     		sub	r3, r2, r3
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 34


 1079 0030 9AB2     		uxth	r2, r3
 1080 0032 3B1C     		mov	r3, r7
 1081 0034 0A33     		add	r3, r3, #10
 1082 0036 1A80     		strh	r2, [r3]
 795:.\Generated_Source\PSoC4/ADC.c **** 
 796:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1083              		.loc 1 796 0
 1084 0038 3B1C     		mov	r3, r7
 1085 003a 0A33     		add	r3, r3, #10
 1086 003c 1B88     		ldrh	r3, [r3]
 1087 003e 1BB2     		sxth	r3, r3
 1088 0040 3B60     		str	r3, [r7]
 1089 0042 DB17     		asr	r3, r3, #31
 1090 0044 7B60     		str	r3, [r7, #4]
 1091 0046 3868     		ldr	r0, [r7]
 1092 0048 7968     		ldr	r1, [r7, #4]
 1093 004a 104B     		ldr	r3, .L80+4
 1094 004c 0E4A     		ldr	r2, .L80
 1095 004e FFF7FEFF 		bl	__aeabi_lmul
 1096 0052 021C     		mov	r2, r0
 1097 0054 0B1C     		mov	r3, r1
 1098 0056 0F49     		ldr	r1, .L80+12
 1099 0058 F868     		ldr	r0, [r7, #12]
 1100 005a 8000     		lsl	r0, r0, #2
 1101 005c 4158     		ldr	r1, [r0, r1]
 1102 005e 0C1C     		mov	r4, r1
 1103 0060 C917     		asr	r1, r1, #31
 1104 0062 0D1C     		mov	r5, r1
 1105 0064 101C     		mov	r0, r2
 1106 0066 191C     		mov	r1, r3
 1107 0068 221C     		mov	r2, r4
 1108 006a 2B1C     		mov	r3, r5
 1109 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1110 0070 031C     		mov	r3, r0
 1111 0072 0C1C     		mov	r4, r1
 1112 0074 3B61     		str	r3, [r7, #16]
 1113 0076 7C61     		str	r4, [r7, #20]
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1114              		.loc 1 798 0
 1115 0078 3B69     		ldr	r3, [r7, #16]
 799:.\Generated_Source\PSoC4/ADC.c ****     }
 1116              		.loc 1 799 0
 1117 007a 181C     		mov	r0, r3
 1118 007c BD46     		mov	sp, r7
 1119 007e 06B0     		add	sp, sp, #24
 1120              		@ sp needed
 1121 0080 B0BD     		pop	{r4, r5, r7, pc}
 1122              	.L81:
 1123 0082 C046C046 		.align	3
 1123      C046
 1124              	.L80:
 1125 0088 80969800 		.word	10000000
 1126 008c 00000000 		.word	0
 1127 0090 00000000 		.word	ADC_offset
 1128 0094 00000000 		.word	ADC_countsPer10Volt
 1129              		.cfi_endproc
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 35


 1130              	.LFE18:
 1131              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1132              		.global	__aeabi_i2f
 1133              		.global	__aeabi_fmul
 1134              		.global	__aeabi_fdiv
 1135              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1136              		.align	2
 1137              		.global	ADC_CountsTo_Volts
 1138              		.code	16
 1139              		.thumb_func
 1140              		.type	ADC_CountsTo_Volts, %function
 1141              	ADC_CountsTo_Volts:
 1142              	.LFB19:
 800:.\Generated_Source\PSoC4/ADC.c **** 
 801:.\Generated_Source\PSoC4/ADC.c **** 
 802:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 803:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 804:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 805:.\Generated_Source\PSoC4/ADC.c ****     *
 806:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 807:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 808:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 809:.\Generated_Source\PSoC4/ADC.c ****     *
 810:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 811:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 816:.\Generated_Source\PSoC4/ADC.c ****     *
 817:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 818:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 819:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 820:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 821:.\Generated_Source\PSoC4/ADC.c ****     *
 822:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 823:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 824:.\Generated_Source\PSoC4/ADC.c ****     {
 1143              		.loc 1 824 0
 1144              		.cfi_startproc
 1145 0000 90B5     		push	{r4, r7, lr}
 1146              		.cfi_def_cfa_offset 12
 1147              		.cfi_offset 4, -12
 1148              		.cfi_offset 7, -8
 1149              		.cfi_offset 14, -4
 1150 0002 85B0     		sub	sp, sp, #20
 1151              		.cfi_def_cfa_offset 32
 1152 0004 00AF     		add	r7, sp, #0
 1153              		.cfi_def_cfa_register 7
 1154 0006 7860     		str	r0, [r7, #4]
 1155 0008 0A1C     		mov	r2, r1
 1156 000a BB1C     		add	r3, r7, #2
 1157 000c 1A80     		strh	r2, [r3]
 825:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 828:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 36


 1158              		.loc 1 828 0
 1159 000e 7B68     		ldr	r3, [r7, #4]
 1160 0010 002B     		cmp	r3, #0
 1161 0012 02D0     		beq	.L83
 1162              		.loc 1 828 0 is_stmt 0 discriminator 1
 1163 0014 0020     		mov	r0, #0
 1164 0016 FFF7FEFF 		bl	CyHalt
 1165              	.L83:
 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 831:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 832:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 833:.\Generated_Source\PSoC4/ADC.c ****             {
 834:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 835:.\Generated_Source\PSoC4/ADC.c ****             }
 836:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 839:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1166              		.loc 1 839 0 is_stmt 1
 1167 001a BB1C     		add	r3, r7, #2
 1168 001c 1A88     		ldrh	r2, [r3]
 1169 001e 154B     		ldr	r3, .L85
 1170 0020 7968     		ldr	r1, [r7, #4]
 1171 0022 4900     		lsl	r1, r1, #1
 1172 0024 CB5A     		ldrh	r3, [r1, r3]
 1173 0026 9BB2     		uxth	r3, r3
 1174 0028 9BB2     		uxth	r3, r3
 1175 002a D31A     		sub	r3, r2, r3
 1176 002c 9AB2     		uxth	r2, r3
 1177 002e BB1C     		add	r3, r7, #2
 1178 0030 1A80     		strh	r2, [r3]
 840:.\Generated_Source\PSoC4/ADC.c **** 
 841:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1179              		.loc 1 841 0
 1180 0032 BB1C     		add	r3, r7, #2
 1181 0034 0022     		mov	r2, #0
 1182 0036 9B5E     		ldrsh	r3, [r3, r2]
 1183 0038 181C     		mov	r0, r3
 1184 003a FFF7FEFF 		bl	__aeabi_i2f
 1185 003e 031C     		add	r3, r0, #0
 1186 0040 181C     		add	r0, r3, #0
 1187 0042 0D49     		ldr	r1, .L85+4
 1188 0044 FFF7FEFF 		bl	__aeabi_fmul
 1189 0048 031C     		add	r3, r0, #0
 1190 004a 1C1C     		add	r4, r3, #0
 1191 004c 0B4B     		ldr	r3, .L85+8
 1192 004e 7A68     		ldr	r2, [r7, #4]
 1193 0050 9200     		lsl	r2, r2, #2
 1194 0052 D358     		ldr	r3, [r2, r3]
 1195 0054 181C     		mov	r0, r3
 1196 0056 FFF7FEFF 		bl	__aeabi_i2f
 1197 005a 031C     		add	r3, r0, #0
 1198 005c 201C     		add	r0, r4, #0
 1199 005e 191C     		add	r1, r3, #0
 1200 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1201 0064 031C     		add	r3, r0, #0
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 37


 1202 0066 FB60     		str	r3, [r7, #12]
 842:.\Generated_Source\PSoC4/ADC.c **** 
 843:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1203              		.loc 1 843 0
 1204 0068 FB68     		ldr	r3, [r7, #12]
 844:.\Generated_Source\PSoC4/ADC.c ****     }
 1205              		.loc 1 844 0
 1206 006a 181C     		add	r0, r3, #0
 1207 006c BD46     		mov	sp, r7
 1208 006e 05B0     		add	sp, sp, #20
 1209              		@ sp needed
 1210 0070 90BD     		pop	{r4, r7, pc}
 1211              	.L86:
 1212 0072 C046     		.align	2
 1213              	.L85:
 1214 0074 00000000 		.word	ADC_offset
 1215 0078 00002041 		.word	1092616192
 1216 007c 00000000 		.word	ADC_countsPer10Volt
 1217              		.cfi_endproc
 1218              	.LFE19:
 1219              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1220              		.text
 1221              	.Letext0:
 1222              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1223              		.section	.debug_info,"",%progbits
 1224              	.Ldebug_info0:
 1225 0000 70040000 		.4byte	0x470
 1226 0004 0400     		.2byte	0x4
 1227 0006 00000000 		.4byte	.Ldebug_abbrev0
 1228 000a 04       		.byte	0x4
 1229 000b 01       		.uleb128 0x1
 1230 000c F7020000 		.4byte	.LASF59
 1231 0010 01       		.byte	0x1
 1232 0011 27000000 		.4byte	.LASF60
 1233 0015 8B000000 		.4byte	.LASF61
 1234 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1235 001d 00000000 		.4byte	0
 1236 0021 00000000 		.4byte	.Ldebug_line0
 1237 0025 02       		.uleb128 0x2
 1238 0026 01       		.byte	0x1
 1239 0027 06       		.byte	0x6
 1240 0028 DF020000 		.4byte	.LASF0
 1241 002c 02       		.uleb128 0x2
 1242 002d 01       		.byte	0x1
 1243 002e 08       		.byte	0x8
 1244 002f 30010000 		.4byte	.LASF1
 1245 0033 02       		.uleb128 0x2
 1246 0034 02       		.byte	0x2
 1247 0035 05       		.byte	0x5
 1248 0036 D8000000 		.4byte	.LASF2
 1249 003a 02       		.uleb128 0x2
 1250 003b 02       		.byte	0x2
 1251 003c 07       		.byte	0x7
 1252 003d 78000000 		.4byte	.LASF3
 1253 0041 02       		.uleb128 0x2
 1254 0042 04       		.byte	0x4
 1255 0043 05       		.byte	0x5
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 38


 1256 0044 D1020000 		.4byte	.LASF4
 1257 0048 02       		.uleb128 0x2
 1258 0049 04       		.byte	0x4
 1259 004a 07       		.byte	0x7
 1260 004b 55010000 		.4byte	.LASF5
 1261 004f 02       		.uleb128 0x2
 1262 0050 08       		.byte	0x8
 1263 0051 05       		.byte	0x5
 1264 0052 00000000 		.4byte	.LASF6
 1265 0056 02       		.uleb128 0x2
 1266 0057 08       		.byte	0x8
 1267 0058 07       		.byte	0x7
 1268 0059 10020000 		.4byte	.LASF7
 1269 005d 03       		.uleb128 0x3
 1270 005e 04       		.byte	0x4
 1271 005f 05       		.byte	0x5
 1272 0060 696E7400 		.ascii	"int\000"
 1273 0064 02       		.uleb128 0x2
 1274 0065 04       		.byte	0x4
 1275 0066 07       		.byte	0x7
 1276 0067 F1010000 		.4byte	.LASF8
 1277 006b 04       		.uleb128 0x4
 1278 006c B7020000 		.4byte	.LASF9
 1279 0070 02       		.byte	0x2
 1280 0071 A1       		.byte	0xa1
 1281 0072 2C000000 		.4byte	0x2c
 1282 0076 04       		.uleb128 0x4
 1283 0077 C8010000 		.4byte	.LASF10
 1284 007b 02       		.byte	0x2
 1285 007c A2       		.byte	0xa2
 1286 007d 3A000000 		.4byte	0x3a
 1287 0081 04       		.uleb128 0x4
 1288 0082 D9010000 		.4byte	.LASF11
 1289 0086 02       		.byte	0x2
 1290 0087 A3       		.byte	0xa3
 1291 0088 48000000 		.4byte	0x48
 1292 008c 04       		.uleb128 0x4
 1293 008d 4F010000 		.4byte	.LASF12
 1294 0091 02       		.byte	0x2
 1295 0092 A5       		.byte	0xa5
 1296 0093 33000000 		.4byte	0x33
 1297 0097 04       		.uleb128 0x4
 1298 0098 67010000 		.4byte	.LASF13
 1299 009c 02       		.byte	0x2
 1300 009d A6       		.byte	0xa6
 1301 009e 41000000 		.4byte	0x41
 1302 00a2 04       		.uleb128 0x4
 1303 00a3 07010000 		.4byte	.LASF14
 1304 00a7 02       		.byte	0x2
 1305 00a8 A7       		.byte	0xa7
 1306 00a9 AD000000 		.4byte	0xad
 1307 00ad 02       		.uleb128 0x2
 1308 00ae 04       		.byte	0x4
 1309 00af 04       		.byte	0x4
 1310 00b0 4D000000 		.4byte	.LASF15
 1311 00b4 02       		.uleb128 0x2
 1312 00b5 08       		.byte	0x8
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 39


 1313 00b6 04       		.byte	0x4
 1314 00b7 B0010000 		.4byte	.LASF16
 1315 00bb 04       		.uleb128 0x4
 1316 00bc 73030000 		.4byte	.LASF17
 1317 00c0 02       		.byte	0x2
 1318 00c1 AC       		.byte	0xac
 1319 00c2 4F000000 		.4byte	0x4f
 1320 00c6 02       		.uleb128 0x2
 1321 00c7 01       		.byte	0x1
 1322 00c8 08       		.byte	0x8
 1323 00c9 DA020000 		.4byte	.LASF18
 1324 00cd 05       		.uleb128 0x5
 1325 00ce 21000000 		.4byte	.LASF19
 1326 00d2 02       		.byte	0x2
 1327 00d3 4D01     		.2byte	0x14d
 1328 00d5 D9000000 		.4byte	0xd9
 1329 00d9 06       		.uleb128 0x6
 1330 00da 81000000 		.4byte	0x81
 1331 00de 02       		.uleb128 0x2
 1332 00df 04       		.byte	0x4
 1333 00e0 07       		.byte	0x7
 1334 00e1 53020000 		.4byte	.LASF20
 1335 00e5 07       		.uleb128 0x7
 1336 00e6 2E020000 		.4byte	.LASF24
 1337 00ea 01       		.byte	0x1
 1338 00eb 3F       		.byte	0x3f
 1339 00ec 00000000 		.4byte	.LFB2
 1340 00f0 24000000 		.4byte	.LFE2-.LFB2
 1341 00f4 01       		.uleb128 0x1
 1342 00f5 9C       		.byte	0x9c
 1343 00f6 08       		.uleb128 0x8
 1344 00f7 38020000 		.4byte	.LASF35
 1345 00fb 01       		.byte	0x1
 1346 00fc 5E       		.byte	0x5e
 1347 00fd 00000000 		.4byte	.LFB3
 1348 0101 C4010000 		.4byte	.LFE3-.LFB3
 1349 0105 01       		.uleb128 0x1
 1350 0106 9C       		.byte	0x9c
 1351 0107 36010000 		.4byte	0x136
 1352 010b 09       		.uleb128 0x9
 1353 010c 99020000 		.4byte	.LASF21
 1354 0110 01       		.byte	0x1
 1355 0111 60       		.byte	0x60
 1356 0112 81000000 		.4byte	0x81
 1357 0116 02       		.uleb128 0x2
 1358 0117 91       		.byte	0x91
 1359 0118 6C       		.sleb128 -20
 1360 0119 09       		.uleb128 0x9
 1361 011a 1A010000 		.4byte	.LASF22
 1362 011e 01       		.byte	0x1
 1363 011f 61       		.byte	0x61
 1364 0120 81000000 		.4byte	0x81
 1365 0124 02       		.uleb128 0x2
 1366 0125 91       		.byte	0x91
 1367 0126 64       		.sleb128 -28
 1368 0127 09       		.uleb128 0x9
 1369 0128 09020000 		.4byte	.LASF23
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 40


 1370 012c 01       		.byte	0x1
 1371 012d 62       		.byte	0x62
 1372 012e 97000000 		.4byte	0x97
 1373 0132 02       		.uleb128 0x2
 1374 0133 91       		.byte	0x91
 1375 0134 68       		.sleb128 -24
 1376 0135 00       		.byte	0
 1377 0136 0A       		.uleb128 0xa
 1378 0137 FE010000 		.4byte	.LASF25
 1379 013b 01       		.byte	0x1
 1380 013c 2A01     		.2byte	0x12a
 1381 013e 00000000 		.4byte	.LFB4
 1382 0142 38000000 		.4byte	.LFE4-.LFB4
 1383 0146 01       		.uleb128 0x1
 1384 0147 9C       		.byte	0x9c
 1385 0148 0B       		.uleb128 0xb
 1386 0149 79030000 		.4byte	.LASF26
 1387 014d 01       		.byte	0x1
 1388 014e 4D01     		.2byte	0x14d
 1389 0150 00000000 		.4byte	.LFB5
 1390 0154 18000000 		.4byte	.LFE5-.LFB5
 1391 0158 01       		.uleb128 0x1
 1392 0159 9C       		.byte	0x9c
 1393 015a 0B       		.uleb128 0xb
 1394 015b 83020000 		.4byte	.LASF27
 1395 015f 01       		.byte	0x1
 1396 0160 6701     		.2byte	0x167
 1397 0162 00000000 		.4byte	.LFB6
 1398 0166 14000000 		.4byte	.LFE6-.LFB6
 1399 016a 01       		.uleb128 0x1
 1400 016b 9C       		.byte	0x9c
 1401 016c 0B       		.uleb128 0xb
 1402 016d A7020000 		.4byte	.LASF28
 1403 0171 01       		.byte	0x1
 1404 0172 8001     		.2byte	0x180
 1405 0174 00000000 		.4byte	.LFB7
 1406 0178 08000000 		.4byte	.LFE7-.LFB7
 1407 017c 01       		.uleb128 0x1
 1408 017d 9C       		.byte	0x9c
 1409 017e 0C       		.uleb128 0xc
 1410 017f 9C010000 		.4byte	.LASF30
 1411 0183 01       		.byte	0x1
 1412 0184 A201     		.2byte	0x1a2
 1413 0186 81000000 		.4byte	0x81
 1414 018a 00000000 		.4byte	.LFB8
 1415 018e 48000000 		.4byte	.LFE8-.LFB8
 1416 0192 01       		.uleb128 0x1
 1417 0193 9C       		.byte	0x9c
 1418 0194 B7010000 		.4byte	0x1b7
 1419 0198 0D       		.uleb128 0xd
 1420 0199 9F020000 		.4byte	.LASF32
 1421 019d 01       		.byte	0x1
 1422 019e A201     		.2byte	0x1a2
 1423 01a0 81000000 		.4byte	0x81
 1424 01a4 02       		.uleb128 0x2
 1425 01a5 91       		.byte	0x91
 1426 01a6 6C       		.sleb128 -20
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 41


 1427 01a7 0E       		.uleb128 0xe
 1428 01a8 00010000 		.4byte	.LASF29
 1429 01ac 01       		.byte	0x1
 1430 01ad A401     		.2byte	0x1a4
 1431 01af 81000000 		.4byte	0x81
 1432 01b3 02       		.uleb128 0x2
 1433 01b4 91       		.byte	0x91
 1434 01b5 74       		.sleb128 -12
 1435 01b6 00       		.byte	0
 1436 01b7 0F       		.uleb128 0xf
 1437 01b8 6D010000 		.4byte	.LASF31
 1438 01bc 01       		.byte	0x1
 1439 01bd D801     		.2byte	0x1d8
 1440 01bf 8C000000 		.4byte	0x8c
 1441 01c3 00000000 		.4byte	.LFB9
 1442 01c7 44000000 		.4byte	.LFE9-.LFB9
 1443 01cb 01       		.uleb128 0x1
 1444 01cc 9C       		.byte	0x9c
 1445 01cd F0010000 		.4byte	0x1f0
 1446 01d1 0D       		.uleb128 0xd
 1447 01d2 47020000 		.4byte	.LASF33
 1448 01d6 01       		.byte	0x1
 1449 01d7 D801     		.2byte	0x1d8
 1450 01d9 81000000 		.4byte	0x81
 1451 01dd 02       		.uleb128 0x2
 1452 01de 91       		.byte	0x91
 1453 01df 6C       		.sleb128 -20
 1454 01e0 0E       		.uleb128 0xe
 1455 01e1 27020000 		.4byte	.LASF34
 1456 01e5 01       		.byte	0x1
 1457 01e6 DA01     		.2byte	0x1da
 1458 01e8 81000000 		.4byte	0x81
 1459 01ec 02       		.uleb128 0x2
 1460 01ed 91       		.byte	0x91
 1461 01ee 74       		.sleb128 -12
 1462 01ef 00       		.byte	0
 1463 01f0 10       		.uleb128 0x10
 1464 01f1 7D010000 		.4byte	.LASF36
 1465 01f5 01       		.byte	0x1
 1466 01f6 0502     		.2byte	0x205
 1467 01f8 00000000 		.4byte	.LFB10
 1468 01fc 1C000000 		.4byte	.LFE10-.LFB10
 1469 0200 01       		.uleb128 0x1
 1470 0201 9C       		.byte	0x9c
 1471 0202 16020000 		.4byte	0x216
 1472 0206 0D       		.uleb128 0xd
 1473 0207 94020000 		.4byte	.LASF37
 1474 020b 01       		.byte	0x1
 1475 020c 0502     		.2byte	0x205
 1476 020e 81000000 		.4byte	0x81
 1477 0212 02       		.uleb128 0x2
 1478 0213 91       		.byte	0x91
 1479 0214 74       		.sleb128 -12
 1480 0215 00       		.byte	0
 1481 0216 10       		.uleb128 0x10
 1482 0217 F0000000 		.4byte	.LASF38
 1483 021b 01       		.byte	0x1
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 42


 1484 021c 3102     		.2byte	0x231
 1485 021e 00000000 		.4byte	.LFB11
 1486 0222 30000000 		.4byte	.LFE11-.LFB11
 1487 0226 01       		.uleb128 0x1
 1488 0227 9C       		.byte	0x9c
 1489 0228 3C020000 		.4byte	0x23c
 1490 022c 0D       		.uleb128 0xd
 1491 022d B7010000 		.4byte	.LASF39
 1492 0231 01       		.byte	0x1
 1493 0232 3102     		.2byte	0x231
 1494 0234 81000000 		.4byte	0x81
 1495 0238 02       		.uleb128 0x2
 1496 0239 91       		.byte	0x91
 1497 023a 74       		.sleb128 -12
 1498 023b 00       		.byte	0
 1499 023c 10       		.uleb128 0x10
 1500 023d 3E010000 		.4byte	.LASF40
 1501 0241 01       		.byte	0x1
 1502 0242 4602     		.2byte	0x246
 1503 0244 00000000 		.4byte	.LFB12
 1504 0248 2C000000 		.4byte	.LFE12-.LFB12
 1505 024c 01       		.uleb128 0x1
 1506 024d 9C       		.byte	0x9c
 1507 024e 62020000 		.4byte	0x262
 1508 0252 0D       		.uleb128 0xd
 1509 0253 53000000 		.4byte	.LASF41
 1510 0257 01       		.byte	0x1
 1511 0258 4602     		.2byte	0x246
 1512 025a 81000000 		.4byte	0x81
 1513 025e 02       		.uleb128 0x2
 1514 025f 91       		.byte	0x91
 1515 0260 74       		.sleb128 -12
 1516 0261 00       		.byte	0
 1517 0262 10       		.uleb128 0x10
 1518 0263 E0010000 		.4byte	.LASF42
 1519 0267 01       		.byte	0x1
 1520 0268 5E02     		.2byte	0x25e
 1521 026a 00000000 		.4byte	.LFB13
 1522 026e 1C000000 		.4byte	.LFE13-.LFB13
 1523 0272 01       		.uleb128 0x1
 1524 0273 9C       		.byte	0x9c
 1525 0274 88020000 		.4byte	0x288
 1526 0278 0D       		.uleb128 0xd
 1527 0279 94020000 		.4byte	.LASF37
 1528 027d 01       		.byte	0x1
 1529 027e 5E02     		.2byte	0x25e
 1530 0280 81000000 		.4byte	0x81
 1531 0284 02       		.uleb128 0x2
 1532 0285 91       		.byte	0x91
 1533 0286 74       		.sleb128 -12
 1534 0287 00       		.byte	0
 1535 0288 10       		.uleb128 0x10
 1536 0289 8D010000 		.4byte	.LASF43
 1537 028d 01       		.byte	0x1
 1538 028e 7502     		.2byte	0x275
 1539 0290 00000000 		.4byte	.LFB14
 1540 0294 1C000000 		.4byte	.LFE14-.LFB14
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 43


 1541 0298 01       		.uleb128 0x1
 1542 0299 9C       		.byte	0x9c
 1543 029a AE020000 		.4byte	0x2ae
 1544 029e 0D       		.uleb128 0xd
 1545 029f 94020000 		.4byte	.LASF37
 1546 02a3 01       		.byte	0x1
 1547 02a4 7502     		.2byte	0x275
 1548 02a6 81000000 		.4byte	0x81
 1549 02aa 02       		.uleb128 0x2
 1550 02ab 91       		.byte	0x91
 1551 02ac 74       		.sleb128 -12
 1552 02ad 00       		.byte	0
 1553 02ae 11       		.uleb128 0x11
 1554 02af E2000000 		.4byte	.LASF44
 1555 02b3 01       		.byte	0x1
 1556 02b4 9102     		.2byte	0x291
 1557 02b6 00000000 		.4byte	.LFB15
 1558 02ba 30000000 		.4byte	.LFE15-.LFB15
 1559 02be 01       		.uleb128 0x1
 1560 02bf 9C       		.byte	0x9c
 1561 02c0 E3020000 		.4byte	0x2e3
 1562 02c4 0D       		.uleb128 0xd
 1563 02c5 47020000 		.4byte	.LASF33
 1564 02c9 01       		.byte	0x1
 1565 02ca 9102     		.2byte	0x291
 1566 02cc 81000000 		.4byte	0x81
 1567 02d0 02       		.uleb128 0x2
 1568 02d1 91       		.byte	0x91
 1569 02d2 74       		.sleb128 -12
 1570 02d3 0D       		.uleb128 0xd
 1571 02d4 46000000 		.4byte	.LASF45
 1572 02d8 01       		.byte	0x1
 1573 02d9 9102     		.2byte	0x291
 1574 02db 8C000000 		.4byte	0x8c
 1575 02df 02       		.uleb128 0x2
 1576 02e0 91       		.byte	0x91
 1577 02e1 72       		.sleb128 -14
 1578 02e2 00       		.byte	0
 1579 02e3 11       		.uleb128 0x11
 1580 02e4 24010000 		.4byte	.LASF46
 1581 02e8 01       		.byte	0x1
 1582 02e9 B302     		.2byte	0x2b3
 1583 02eb 00000000 		.4byte	.LFB16
 1584 02ef 2C000000 		.4byte	.LFE16-.LFB16
 1585 02f3 01       		.uleb128 0x1
 1586 02f4 9C       		.byte	0x9c
 1587 02f5 18030000 		.4byte	0x318
 1588 02f9 0D       		.uleb128 0xd
 1589 02fa 47020000 		.4byte	.LASF33
 1590 02fe 01       		.byte	0x1
 1591 02ff B302     		.2byte	0x2b3
 1592 0301 81000000 		.4byte	0x81
 1593 0305 02       		.uleb128 0x2
 1594 0306 91       		.byte	0x91
 1595 0307 74       		.sleb128 -12
 1596 0308 0D       		.uleb128 0xd
 1597 0309 C0010000 		.4byte	.LASF47
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 44


 1598 030d 01       		.byte	0x1
 1599 030e B302     		.2byte	0x2b3
 1600 0310 97000000 		.4byte	0x97
 1601 0314 02       		.uleb128 0x2
 1602 0315 91       		.byte	0x91
 1603 0316 70       		.sleb128 -16
 1604 0317 00       		.byte	0
 1605 0318 0F       		.uleb128 0xf
 1606 0319 5D000000 		.4byte	.LASF48
 1607 031d 01       		.byte	0x1
 1608 031e D402     		.2byte	0x2d4
 1609 0320 8C000000 		.4byte	0x8c
 1610 0324 00000000 		.4byte	.LFB17
 1611 0328 A4000000 		.4byte	.LFE17-.LFB17
 1612 032c 01       		.uleb128 0x1
 1613 032d 9C       		.byte	0x9c
 1614 032e 60030000 		.4byte	0x360
 1615 0332 0D       		.uleb128 0xd
 1616 0333 47020000 		.4byte	.LASF33
 1617 0337 01       		.byte	0x1
 1618 0338 D402     		.2byte	0x2d4
 1619 033a 81000000 		.4byte	0x81
 1620 033e 02       		.uleb128 0x2
 1621 033f 91       		.byte	0x91
 1622 0340 6C       		.sleb128 -20
 1623 0341 0D       		.uleb128 0xd
 1624 0342 CF010000 		.4byte	.LASF49
 1625 0346 01       		.byte	0x1
 1626 0347 D402     		.2byte	0x2d4
 1627 0349 8C000000 		.4byte	0x8c
 1628 034d 02       		.uleb128 0x2
 1629 034e 91       		.byte	0x91
 1630 034f 6A       		.sleb128 -22
 1631 0350 0E       		.uleb128 0xe
 1632 0351 4C020000 		.4byte	.LASF50
 1633 0355 01       		.byte	0x1
 1634 0356 D602     		.2byte	0x2d6
 1635 0358 8C000000 		.4byte	0x8c
 1636 035c 02       		.uleb128 0x2
 1637 035d 91       		.byte	0x91
 1638 035e 76       		.sleb128 -10
 1639 035f 00       		.byte	0
 1640 0360 0F       		.uleb128 0xf
 1641 0361 5C020000 		.4byte	.LASF51
 1642 0365 01       		.byte	0x1
 1643 0366 0A03     		.2byte	0x30a
 1644 0368 97000000 		.4byte	0x97
 1645 036c 00000000 		.4byte	.LFB18
 1646 0370 98000000 		.4byte	.LFE18-.LFB18
 1647 0374 01       		.uleb128 0x1
 1648 0375 9C       		.byte	0x9c
 1649 0376 A8030000 		.4byte	0x3a8
 1650 037a 0D       		.uleb128 0xd
 1651 037b 47020000 		.4byte	.LASF33
 1652 037f 01       		.byte	0x1
 1653 0380 0A03     		.2byte	0x30a
 1654 0382 81000000 		.4byte	0x81
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 45


 1655 0386 02       		.uleb128 0x2
 1656 0387 91       		.byte	0x91
 1657 0388 64       		.sleb128 -28
 1658 0389 0D       		.uleb128 0xd
 1659 038a CF010000 		.4byte	.LASF49
 1660 038e 01       		.byte	0x1
 1661 038f 0A03     		.2byte	0x30a
 1662 0391 8C000000 		.4byte	0x8c
 1663 0395 02       		.uleb128 0x2
 1664 0396 91       		.byte	0x91
 1665 0397 62       		.sleb128 -30
 1666 0398 0E       		.uleb128 0xe
 1667 0399 71000000 		.4byte	.LASF52
 1668 039d 01       		.byte	0x1
 1669 039e 0C03     		.2byte	0x30c
 1670 03a0 BB000000 		.4byte	0xbb
 1671 03a4 02       		.uleb128 0x2
 1672 03a5 91       		.byte	0x91
 1673 03a6 68       		.sleb128 -24
 1674 03a7 00       		.byte	0
 1675 03a8 0F       		.uleb128 0xf
 1676 03a9 70020000 		.4byte	.LASF53
 1677 03ad 01       		.byte	0x1
 1678 03ae 3703     		.2byte	0x337
 1679 03b0 A2000000 		.4byte	0xa2
 1680 03b4 00000000 		.4byte	.LFB19
 1681 03b8 80000000 		.4byte	.LFE19-.LFB19
 1682 03bc 01       		.uleb128 0x1
 1683 03bd 9C       		.byte	0x9c
 1684 03be F0030000 		.4byte	0x3f0
 1685 03c2 0D       		.uleb128 0xd
 1686 03c3 47020000 		.4byte	.LASF33
 1687 03c7 01       		.byte	0x1
 1688 03c8 3703     		.2byte	0x337
 1689 03ca 81000000 		.4byte	0x81
 1690 03ce 02       		.uleb128 0x2
 1691 03cf 91       		.byte	0x91
 1692 03d0 64       		.sleb128 -28
 1693 03d1 0D       		.uleb128 0xd
 1694 03d2 CF010000 		.4byte	.LASF49
 1695 03d6 01       		.byte	0x1
 1696 03d7 3703     		.2byte	0x337
 1697 03d9 8C000000 		.4byte	0x8c
 1698 03dd 02       		.uleb128 0x2
 1699 03de 91       		.byte	0x91
 1700 03df 62       		.sleb128 -30
 1701 03e0 0E       		.uleb128 0xe
 1702 03e1 41020000 		.4byte	.LASF54
 1703 03e5 01       		.byte	0x1
 1704 03e6 3903     		.2byte	0x339
 1705 03e8 A2000000 		.4byte	0xa2
 1706 03ec 02       		.uleb128 0x2
 1707 03ed 91       		.byte	0x91
 1708 03ee 6C       		.sleb128 -20
 1709 03ef 00       		.byte	0
 1710 03f0 12       		.uleb128 0x12
 1711 03f1 81000000 		.4byte	0x81
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 46


 1712 03f5 00040000 		.4byte	0x400
 1713 03f9 13       		.uleb128 0x13
 1714 03fa DE000000 		.4byte	0xde
 1715 03fe 00       		.byte	0
 1716 03ff 00       		.byte	0
 1717 0400 09       		.uleb128 0x9
 1718 0401 0E000000 		.4byte	.LASF55
 1719 0405 01       		.byte	0x1
 1720 0406 21       		.byte	0x21
 1721 0407 11040000 		.4byte	0x411
 1722 040b 05       		.uleb128 0x5
 1723 040c 03       		.byte	0x3
 1724 040d 00000000 		.4byte	ADC_channelsConfig
 1725 0411 14       		.uleb128 0x14
 1726 0412 F0030000 		.4byte	0x3f0
 1727 0416 15       		.uleb128 0x15
 1728 0417 EB020000 		.4byte	.LASF56
 1729 041b 01       		.byte	0x1
 1730 041c 18       		.byte	0x18
 1731 041d 6B000000 		.4byte	0x6b
 1732 0421 05       		.uleb128 0x5
 1733 0422 03       		.byte	0x3
 1734 0423 00000000 		.4byte	ADC_initVar
 1735 0427 12       		.uleb128 0x12
 1736 0428 8C000000 		.4byte	0x8c
 1737 042c 37040000 		.4byte	0x437
 1738 0430 13       		.uleb128 0x13
 1739 0431 DE000000 		.4byte	0xde
 1740 0435 00       		.byte	0
 1741 0436 00       		.byte	0
 1742 0437 15       		.uleb128 0x15
 1743 0438 0F010000 		.4byte	.LASF57
 1744 043c 01       		.byte	0x1
 1745 043d 19       		.byte	0x19
 1746 043e 48040000 		.4byte	0x448
 1747 0442 05       		.uleb128 0x5
 1748 0443 03       		.byte	0x3
 1749 0444 00000000 		.4byte	ADC_offset
 1750 0448 06       		.uleb128 0x6
 1751 0449 27040000 		.4byte	0x427
 1752 044d 12       		.uleb128 0x12
 1753 044e 97000000 		.4byte	0x97
 1754 0452 5D040000 		.4byte	0x45d
 1755 0456 13       		.uleb128 0x13
 1756 0457 DE000000 		.4byte	0xde
 1757 045b 00       		.byte	0
 1758 045c 00       		.byte	0
 1759 045d 15       		.uleb128 0x15
 1760 045e BD020000 		.4byte	.LASF58
 1761 0462 01       		.byte	0x1
 1762 0463 1A       		.byte	0x1a
 1763 0464 6E040000 		.4byte	0x46e
 1764 0468 05       		.uleb128 0x5
 1765 0469 03       		.byte	0x3
 1766 046a 00000000 		.4byte	ADC_countsPer10Volt
 1767 046e 06       		.uleb128 0x6
 1768 046f 4D040000 		.4byte	0x44d
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 47


 1769 0473 00       		.byte	0
 1770              		.section	.debug_abbrev,"",%progbits
 1771              	.Ldebug_abbrev0:
 1772 0000 01       		.uleb128 0x1
 1773 0001 11       		.uleb128 0x11
 1774 0002 01       		.byte	0x1
 1775 0003 25       		.uleb128 0x25
 1776 0004 0E       		.uleb128 0xe
 1777 0005 13       		.uleb128 0x13
 1778 0006 0B       		.uleb128 0xb
 1779 0007 03       		.uleb128 0x3
 1780 0008 0E       		.uleb128 0xe
 1781 0009 1B       		.uleb128 0x1b
 1782 000a 0E       		.uleb128 0xe
 1783 000b 55       		.uleb128 0x55
 1784 000c 17       		.uleb128 0x17
 1785 000d 11       		.uleb128 0x11
 1786 000e 01       		.uleb128 0x1
 1787 000f 10       		.uleb128 0x10
 1788 0010 17       		.uleb128 0x17
 1789 0011 00       		.byte	0
 1790 0012 00       		.byte	0
 1791 0013 02       		.uleb128 0x2
 1792 0014 24       		.uleb128 0x24
 1793 0015 00       		.byte	0
 1794 0016 0B       		.uleb128 0xb
 1795 0017 0B       		.uleb128 0xb
 1796 0018 3E       		.uleb128 0x3e
 1797 0019 0B       		.uleb128 0xb
 1798 001a 03       		.uleb128 0x3
 1799 001b 0E       		.uleb128 0xe
 1800 001c 00       		.byte	0
 1801 001d 00       		.byte	0
 1802 001e 03       		.uleb128 0x3
 1803 001f 24       		.uleb128 0x24
 1804 0020 00       		.byte	0
 1805 0021 0B       		.uleb128 0xb
 1806 0022 0B       		.uleb128 0xb
 1807 0023 3E       		.uleb128 0x3e
 1808 0024 0B       		.uleb128 0xb
 1809 0025 03       		.uleb128 0x3
 1810 0026 08       		.uleb128 0x8
 1811 0027 00       		.byte	0
 1812 0028 00       		.byte	0
 1813 0029 04       		.uleb128 0x4
 1814 002a 16       		.uleb128 0x16
 1815 002b 00       		.byte	0
 1816 002c 03       		.uleb128 0x3
 1817 002d 0E       		.uleb128 0xe
 1818 002e 3A       		.uleb128 0x3a
 1819 002f 0B       		.uleb128 0xb
 1820 0030 3B       		.uleb128 0x3b
 1821 0031 0B       		.uleb128 0xb
 1822 0032 49       		.uleb128 0x49
 1823 0033 13       		.uleb128 0x13
 1824 0034 00       		.byte	0
 1825 0035 00       		.byte	0
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 48


 1826 0036 05       		.uleb128 0x5
 1827 0037 16       		.uleb128 0x16
 1828 0038 00       		.byte	0
 1829 0039 03       		.uleb128 0x3
 1830 003a 0E       		.uleb128 0xe
 1831 003b 3A       		.uleb128 0x3a
 1832 003c 0B       		.uleb128 0xb
 1833 003d 3B       		.uleb128 0x3b
 1834 003e 05       		.uleb128 0x5
 1835 003f 49       		.uleb128 0x49
 1836 0040 13       		.uleb128 0x13
 1837 0041 00       		.byte	0
 1838 0042 00       		.byte	0
 1839 0043 06       		.uleb128 0x6
 1840 0044 35       		.uleb128 0x35
 1841 0045 00       		.byte	0
 1842 0046 49       		.uleb128 0x49
 1843 0047 13       		.uleb128 0x13
 1844 0048 00       		.byte	0
 1845 0049 00       		.byte	0
 1846 004a 07       		.uleb128 0x7
 1847 004b 2E       		.uleb128 0x2e
 1848 004c 00       		.byte	0
 1849 004d 3F       		.uleb128 0x3f
 1850 004e 19       		.uleb128 0x19
 1851 004f 03       		.uleb128 0x3
 1852 0050 0E       		.uleb128 0xe
 1853 0051 3A       		.uleb128 0x3a
 1854 0052 0B       		.uleb128 0xb
 1855 0053 3B       		.uleb128 0x3b
 1856 0054 0B       		.uleb128 0xb
 1857 0055 27       		.uleb128 0x27
 1858 0056 19       		.uleb128 0x19
 1859 0057 11       		.uleb128 0x11
 1860 0058 01       		.uleb128 0x1
 1861 0059 12       		.uleb128 0x12
 1862 005a 06       		.uleb128 0x6
 1863 005b 40       		.uleb128 0x40
 1864 005c 18       		.uleb128 0x18
 1865 005d 9642     		.uleb128 0x2116
 1866 005f 19       		.uleb128 0x19
 1867 0060 00       		.byte	0
 1868 0061 00       		.byte	0
 1869 0062 08       		.uleb128 0x8
 1870 0063 2E       		.uleb128 0x2e
 1871 0064 01       		.byte	0x1
 1872 0065 3F       		.uleb128 0x3f
 1873 0066 19       		.uleb128 0x19
 1874 0067 03       		.uleb128 0x3
 1875 0068 0E       		.uleb128 0xe
 1876 0069 3A       		.uleb128 0x3a
 1877 006a 0B       		.uleb128 0xb
 1878 006b 3B       		.uleb128 0x3b
 1879 006c 0B       		.uleb128 0xb
 1880 006d 27       		.uleb128 0x27
 1881 006e 19       		.uleb128 0x19
 1882 006f 11       		.uleb128 0x11
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 49


 1883 0070 01       		.uleb128 0x1
 1884 0071 12       		.uleb128 0x12
 1885 0072 06       		.uleb128 0x6
 1886 0073 40       		.uleb128 0x40
 1887 0074 18       		.uleb128 0x18
 1888 0075 9642     		.uleb128 0x2116
 1889 0077 19       		.uleb128 0x19
 1890 0078 01       		.uleb128 0x1
 1891 0079 13       		.uleb128 0x13
 1892 007a 00       		.byte	0
 1893 007b 00       		.byte	0
 1894 007c 09       		.uleb128 0x9
 1895 007d 34       		.uleb128 0x34
 1896 007e 00       		.byte	0
 1897 007f 03       		.uleb128 0x3
 1898 0080 0E       		.uleb128 0xe
 1899 0081 3A       		.uleb128 0x3a
 1900 0082 0B       		.uleb128 0xb
 1901 0083 3B       		.uleb128 0x3b
 1902 0084 0B       		.uleb128 0xb
 1903 0085 49       		.uleb128 0x49
 1904 0086 13       		.uleb128 0x13
 1905 0087 02       		.uleb128 0x2
 1906 0088 18       		.uleb128 0x18
 1907 0089 00       		.byte	0
 1908 008a 00       		.byte	0
 1909 008b 0A       		.uleb128 0xa
 1910 008c 2E       		.uleb128 0x2e
 1911 008d 00       		.byte	0
 1912 008e 3F       		.uleb128 0x3f
 1913 008f 19       		.uleb128 0x19
 1914 0090 03       		.uleb128 0x3
 1915 0091 0E       		.uleb128 0xe
 1916 0092 3A       		.uleb128 0x3a
 1917 0093 0B       		.uleb128 0xb
 1918 0094 3B       		.uleb128 0x3b
 1919 0095 05       		.uleb128 0x5
 1920 0096 27       		.uleb128 0x27
 1921 0097 19       		.uleb128 0x19
 1922 0098 11       		.uleb128 0x11
 1923 0099 01       		.uleb128 0x1
 1924 009a 12       		.uleb128 0x12
 1925 009b 06       		.uleb128 0x6
 1926 009c 40       		.uleb128 0x40
 1927 009d 18       		.uleb128 0x18
 1928 009e 9642     		.uleb128 0x2116
 1929 00a0 19       		.uleb128 0x19
 1930 00a1 00       		.byte	0
 1931 00a2 00       		.byte	0
 1932 00a3 0B       		.uleb128 0xb
 1933 00a4 2E       		.uleb128 0x2e
 1934 00a5 00       		.byte	0
 1935 00a6 3F       		.uleb128 0x3f
 1936 00a7 19       		.uleb128 0x19
 1937 00a8 03       		.uleb128 0x3
 1938 00a9 0E       		.uleb128 0xe
 1939 00aa 3A       		.uleb128 0x3a
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 50


 1940 00ab 0B       		.uleb128 0xb
 1941 00ac 3B       		.uleb128 0x3b
 1942 00ad 05       		.uleb128 0x5
 1943 00ae 27       		.uleb128 0x27
 1944 00af 19       		.uleb128 0x19
 1945 00b0 11       		.uleb128 0x11
 1946 00b1 01       		.uleb128 0x1
 1947 00b2 12       		.uleb128 0x12
 1948 00b3 06       		.uleb128 0x6
 1949 00b4 40       		.uleb128 0x40
 1950 00b5 18       		.uleb128 0x18
 1951 00b6 9742     		.uleb128 0x2117
 1952 00b8 19       		.uleb128 0x19
 1953 00b9 00       		.byte	0
 1954 00ba 00       		.byte	0
 1955 00bb 0C       		.uleb128 0xc
 1956 00bc 2E       		.uleb128 0x2e
 1957 00bd 01       		.byte	0x1
 1958 00be 3F       		.uleb128 0x3f
 1959 00bf 19       		.uleb128 0x19
 1960 00c0 03       		.uleb128 0x3
 1961 00c1 0E       		.uleb128 0xe
 1962 00c2 3A       		.uleb128 0x3a
 1963 00c3 0B       		.uleb128 0xb
 1964 00c4 3B       		.uleb128 0x3b
 1965 00c5 05       		.uleb128 0x5
 1966 00c6 27       		.uleb128 0x27
 1967 00c7 19       		.uleb128 0x19
 1968 00c8 49       		.uleb128 0x49
 1969 00c9 13       		.uleb128 0x13
 1970 00ca 11       		.uleb128 0x11
 1971 00cb 01       		.uleb128 0x1
 1972 00cc 12       		.uleb128 0x12
 1973 00cd 06       		.uleb128 0x6
 1974 00ce 40       		.uleb128 0x40
 1975 00cf 18       		.uleb128 0x18
 1976 00d0 9742     		.uleb128 0x2117
 1977 00d2 19       		.uleb128 0x19
 1978 00d3 01       		.uleb128 0x1
 1979 00d4 13       		.uleb128 0x13
 1980 00d5 00       		.byte	0
 1981 00d6 00       		.byte	0
 1982 00d7 0D       		.uleb128 0xd
 1983 00d8 05       		.uleb128 0x5
 1984 00d9 00       		.byte	0
 1985 00da 03       		.uleb128 0x3
 1986 00db 0E       		.uleb128 0xe
 1987 00dc 3A       		.uleb128 0x3a
 1988 00dd 0B       		.uleb128 0xb
 1989 00de 3B       		.uleb128 0x3b
 1990 00df 05       		.uleb128 0x5
 1991 00e0 49       		.uleb128 0x49
 1992 00e1 13       		.uleb128 0x13
 1993 00e2 02       		.uleb128 0x2
 1994 00e3 18       		.uleb128 0x18
 1995 00e4 00       		.byte	0
 1996 00e5 00       		.byte	0
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 51


 1997 00e6 0E       		.uleb128 0xe
 1998 00e7 34       		.uleb128 0x34
 1999 00e8 00       		.byte	0
 2000 00e9 03       		.uleb128 0x3
 2001 00ea 0E       		.uleb128 0xe
 2002 00eb 3A       		.uleb128 0x3a
 2003 00ec 0B       		.uleb128 0xb
 2004 00ed 3B       		.uleb128 0x3b
 2005 00ee 05       		.uleb128 0x5
 2006 00ef 49       		.uleb128 0x49
 2007 00f0 13       		.uleb128 0x13
 2008 00f1 02       		.uleb128 0x2
 2009 00f2 18       		.uleb128 0x18
 2010 00f3 00       		.byte	0
 2011 00f4 00       		.byte	0
 2012 00f5 0F       		.uleb128 0xf
 2013 00f6 2E       		.uleb128 0x2e
 2014 00f7 01       		.byte	0x1
 2015 00f8 3F       		.uleb128 0x3f
 2016 00f9 19       		.uleb128 0x19
 2017 00fa 03       		.uleb128 0x3
 2018 00fb 0E       		.uleb128 0xe
 2019 00fc 3A       		.uleb128 0x3a
 2020 00fd 0B       		.uleb128 0xb
 2021 00fe 3B       		.uleb128 0x3b
 2022 00ff 05       		.uleb128 0x5
 2023 0100 27       		.uleb128 0x27
 2024 0101 19       		.uleb128 0x19
 2025 0102 49       		.uleb128 0x49
 2026 0103 13       		.uleb128 0x13
 2027 0104 11       		.uleb128 0x11
 2028 0105 01       		.uleb128 0x1
 2029 0106 12       		.uleb128 0x12
 2030 0107 06       		.uleb128 0x6
 2031 0108 40       		.uleb128 0x40
 2032 0109 18       		.uleb128 0x18
 2033 010a 9642     		.uleb128 0x2116
 2034 010c 19       		.uleb128 0x19
 2035 010d 01       		.uleb128 0x1
 2036 010e 13       		.uleb128 0x13
 2037 010f 00       		.byte	0
 2038 0110 00       		.byte	0
 2039 0111 10       		.uleb128 0x10
 2040 0112 2E       		.uleb128 0x2e
 2041 0113 01       		.byte	0x1
 2042 0114 3F       		.uleb128 0x3f
 2043 0115 19       		.uleb128 0x19
 2044 0116 03       		.uleb128 0x3
 2045 0117 0E       		.uleb128 0xe
 2046 0118 3A       		.uleb128 0x3a
 2047 0119 0B       		.uleb128 0xb
 2048 011a 3B       		.uleb128 0x3b
 2049 011b 05       		.uleb128 0x5
 2050 011c 27       		.uleb128 0x27
 2051 011d 19       		.uleb128 0x19
 2052 011e 11       		.uleb128 0x11
 2053 011f 01       		.uleb128 0x1
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 52


 2054 0120 12       		.uleb128 0x12
 2055 0121 06       		.uleb128 0x6
 2056 0122 40       		.uleb128 0x40
 2057 0123 18       		.uleb128 0x18
 2058 0124 9742     		.uleb128 0x2117
 2059 0126 19       		.uleb128 0x19
 2060 0127 01       		.uleb128 0x1
 2061 0128 13       		.uleb128 0x13
 2062 0129 00       		.byte	0
 2063 012a 00       		.byte	0
 2064 012b 11       		.uleb128 0x11
 2065 012c 2E       		.uleb128 0x2e
 2066 012d 01       		.byte	0x1
 2067 012e 3F       		.uleb128 0x3f
 2068 012f 19       		.uleb128 0x19
 2069 0130 03       		.uleb128 0x3
 2070 0131 0E       		.uleb128 0xe
 2071 0132 3A       		.uleb128 0x3a
 2072 0133 0B       		.uleb128 0xb
 2073 0134 3B       		.uleb128 0x3b
 2074 0135 05       		.uleb128 0x5
 2075 0136 27       		.uleb128 0x27
 2076 0137 19       		.uleb128 0x19
 2077 0138 11       		.uleb128 0x11
 2078 0139 01       		.uleb128 0x1
 2079 013a 12       		.uleb128 0x12
 2080 013b 06       		.uleb128 0x6
 2081 013c 40       		.uleb128 0x40
 2082 013d 18       		.uleb128 0x18
 2083 013e 9642     		.uleb128 0x2116
 2084 0140 19       		.uleb128 0x19
 2085 0141 01       		.uleb128 0x1
 2086 0142 13       		.uleb128 0x13
 2087 0143 00       		.byte	0
 2088 0144 00       		.byte	0
 2089 0145 12       		.uleb128 0x12
 2090 0146 01       		.uleb128 0x1
 2091 0147 01       		.byte	0x1
 2092 0148 49       		.uleb128 0x49
 2093 0149 13       		.uleb128 0x13
 2094 014a 01       		.uleb128 0x1
 2095 014b 13       		.uleb128 0x13
 2096 014c 00       		.byte	0
 2097 014d 00       		.byte	0
 2098 014e 13       		.uleb128 0x13
 2099 014f 21       		.uleb128 0x21
 2100 0150 00       		.byte	0
 2101 0151 49       		.uleb128 0x49
 2102 0152 13       		.uleb128 0x13
 2103 0153 2F       		.uleb128 0x2f
 2104 0154 0B       		.uleb128 0xb
 2105 0155 00       		.byte	0
 2106 0156 00       		.byte	0
 2107 0157 14       		.uleb128 0x14
 2108 0158 26       		.uleb128 0x26
 2109 0159 00       		.byte	0
 2110 015a 49       		.uleb128 0x49
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 53


 2111 015b 13       		.uleb128 0x13
 2112 015c 00       		.byte	0
 2113 015d 00       		.byte	0
 2114 015e 15       		.uleb128 0x15
 2115 015f 34       		.uleb128 0x34
 2116 0160 00       		.byte	0
 2117 0161 03       		.uleb128 0x3
 2118 0162 0E       		.uleb128 0xe
 2119 0163 3A       		.uleb128 0x3a
 2120 0164 0B       		.uleb128 0xb
 2121 0165 3B       		.uleb128 0x3b
 2122 0166 0B       		.uleb128 0xb
 2123 0167 49       		.uleb128 0x49
 2124 0168 13       		.uleb128 0x13
 2125 0169 3F       		.uleb128 0x3f
 2126 016a 19       		.uleb128 0x19
 2127 016b 02       		.uleb128 0x2
 2128 016c 18       		.uleb128 0x18
 2129 016d 00       		.byte	0
 2130 016e 00       		.byte	0
 2131 016f 00       		.byte	0
 2132              		.section	.debug_aranges,"",%progbits
 2133 0000 A4000000 		.4byte	0xa4
 2134 0004 0200     		.2byte	0x2
 2135 0006 00000000 		.4byte	.Ldebug_info0
 2136 000a 04       		.byte	0x4
 2137 000b 00       		.byte	0
 2138 000c 0000     		.2byte	0
 2139 000e 0000     		.2byte	0
 2140 0010 00000000 		.4byte	.LFB2
 2141 0014 24000000 		.4byte	.LFE2-.LFB2
 2142 0018 00000000 		.4byte	.LFB3
 2143 001c C4010000 		.4byte	.LFE3-.LFB3
 2144 0020 00000000 		.4byte	.LFB4
 2145 0024 38000000 		.4byte	.LFE4-.LFB4
 2146 0028 00000000 		.4byte	.LFB5
 2147 002c 18000000 		.4byte	.LFE5-.LFB5
 2148 0030 00000000 		.4byte	.LFB6
 2149 0034 14000000 		.4byte	.LFE6-.LFB6
 2150 0038 00000000 		.4byte	.LFB7
 2151 003c 08000000 		.4byte	.LFE7-.LFB7
 2152 0040 00000000 		.4byte	.LFB8
 2153 0044 48000000 		.4byte	.LFE8-.LFB8
 2154 0048 00000000 		.4byte	.LFB9
 2155 004c 44000000 		.4byte	.LFE9-.LFB9
 2156 0050 00000000 		.4byte	.LFB10
 2157 0054 1C000000 		.4byte	.LFE10-.LFB10
 2158 0058 00000000 		.4byte	.LFB11
 2159 005c 30000000 		.4byte	.LFE11-.LFB11
 2160 0060 00000000 		.4byte	.LFB12
 2161 0064 2C000000 		.4byte	.LFE12-.LFB12
 2162 0068 00000000 		.4byte	.LFB13
 2163 006c 1C000000 		.4byte	.LFE13-.LFB13
 2164 0070 00000000 		.4byte	.LFB14
 2165 0074 1C000000 		.4byte	.LFE14-.LFB14
 2166 0078 00000000 		.4byte	.LFB15
 2167 007c 30000000 		.4byte	.LFE15-.LFB15
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 54


 2168 0080 00000000 		.4byte	.LFB16
 2169 0084 2C000000 		.4byte	.LFE16-.LFB16
 2170 0088 00000000 		.4byte	.LFB17
 2171 008c A4000000 		.4byte	.LFE17-.LFB17
 2172 0090 00000000 		.4byte	.LFB18
 2173 0094 98000000 		.4byte	.LFE18-.LFB18
 2174 0098 00000000 		.4byte	.LFB19
 2175 009c 80000000 		.4byte	.LFE19-.LFB19
 2176 00a0 00000000 		.4byte	0
 2177 00a4 00000000 		.4byte	0
 2178              		.section	.debug_ranges,"",%progbits
 2179              	.Ldebug_ranges0:
 2180 0000 00000000 		.4byte	.LFB2
 2181 0004 24000000 		.4byte	.LFE2
 2182 0008 00000000 		.4byte	.LFB3
 2183 000c C4010000 		.4byte	.LFE3
 2184 0010 00000000 		.4byte	.LFB4
 2185 0014 38000000 		.4byte	.LFE4
 2186 0018 00000000 		.4byte	.LFB5
 2187 001c 18000000 		.4byte	.LFE5
 2188 0020 00000000 		.4byte	.LFB6
 2189 0024 14000000 		.4byte	.LFE6
 2190 0028 00000000 		.4byte	.LFB7
 2191 002c 08000000 		.4byte	.LFE7
 2192 0030 00000000 		.4byte	.LFB8
 2193 0034 48000000 		.4byte	.LFE8
 2194 0038 00000000 		.4byte	.LFB9
 2195 003c 44000000 		.4byte	.LFE9
 2196 0040 00000000 		.4byte	.LFB10
 2197 0044 1C000000 		.4byte	.LFE10
 2198 0048 00000000 		.4byte	.LFB11
 2199 004c 30000000 		.4byte	.LFE11
 2200 0050 00000000 		.4byte	.LFB12
 2201 0054 2C000000 		.4byte	.LFE12
 2202 0058 00000000 		.4byte	.LFB13
 2203 005c 1C000000 		.4byte	.LFE13
 2204 0060 00000000 		.4byte	.LFB14
 2205 0064 1C000000 		.4byte	.LFE14
 2206 0068 00000000 		.4byte	.LFB15
 2207 006c 30000000 		.4byte	.LFE15
 2208 0070 00000000 		.4byte	.LFB16
 2209 0074 2C000000 		.4byte	.LFE16
 2210 0078 00000000 		.4byte	.LFB17
 2211 007c A4000000 		.4byte	.LFE17
 2212 0080 00000000 		.4byte	.LFB18
 2213 0084 98000000 		.4byte	.LFE18
 2214 0088 00000000 		.4byte	.LFB19
 2215 008c 80000000 		.4byte	.LFE19
 2216 0090 00000000 		.4byte	0
 2217 0094 00000000 		.4byte	0
 2218              		.section	.debug_line,"",%progbits
 2219              	.Ldebug_line0:
 2220 0000 82020000 		.section	.debug_str,"MS",%progbits,1
 2220      02004200 
 2220      00000201 
 2220      FB0E0D00 
 2220      01010101 
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 55


 2221              	.LASF6:
 2222 0000 6C6F6E67 		.ascii	"long long int\000"
 2222      206C6F6E 
 2222      6720696E 
 2222      7400
 2223              	.LASF55:
 2224 000e 4144435F 		.ascii	"ADC_channelsConfig\000"
 2224      6368616E 
 2224      6E656C73 
 2224      436F6E66 
 2224      696700
 2225              	.LASF19:
 2226 0021 72656733 		.ascii	"reg32\000"
 2226      3200
 2227              	.LASF60:
 2228 0027 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2228      6E657261 
 2228      7465645F 
 2228      536F7572 
 2228      63655C50 
 2229              	.LASF45:
 2230 0046 6F666673 		.ascii	"offset\000"
 2230      657400
 2231              	.LASF15:
 2232 004d 666C6F61 		.ascii	"float\000"
 2232      7400
 2233              	.LASF41:
 2234 0053 68696768 		.ascii	"highLimit\000"
 2234      4C696D69 
 2234      7400
 2235              	.LASF48:
 2236 005d 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2236      436F756E 
 2236      7473546F 
 2236      5F6D566F 
 2236      6C747300 
 2237              	.LASF52:
 2238 0071 75566F6C 		.ascii	"uVolts\000"
 2238      747300
 2239              	.LASF3:
 2240 0078 73686F72 		.ascii	"short unsigned int\000"
 2240      7420756E 
 2240      7369676E 
 2240      65642069 
 2240      6E7400
 2241              	.LASF61:
 2242 008b 433A5C55 		.ascii	"C:\\Users\\Manisha Goyal\\Desktop\\safe_3\\lab3_man"
 2242      73657273 
 2242      5C4D616E 
 2242      69736861 
 2242      20476F79 
 2243 00b9 69736861 		.ascii	"isha\\BLE Lab 3\\BLE Lab 3.cydsn\000"
 2243      5C424C45 
 2243      204C6162 
 2243      20335C42 
 2243      4C45204C 
 2244              	.LASF2:
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 56


 2245 00d8 73686F72 		.ascii	"short int\000"
 2245      7420696E 
 2245      7400
 2246              	.LASF44:
 2247 00e2 4144435F 		.ascii	"ADC_SetOffset\000"
 2247      5365744F 
 2247      66667365 
 2247      7400
 2248              	.LASF38:
 2249 00f0 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2249      5365744C 
 2249      6F774C69 
 2249      6D697400 
 2250              	.LASF29:
 2251 0100 73746174 		.ascii	"status\000"
 2251      757300
 2252              	.LASF14:
 2253 0107 666C6F61 		.ascii	"float32\000"
 2253      74333200 
 2254              	.LASF57:
 2255 010f 4144435F 		.ascii	"ADC_offset\000"
 2255      6F666673 
 2255      657400
 2256              	.LASF22:
 2257 011a 746D7052 		.ascii	"tmpRegVal\000"
 2257      65675661 
 2257      6C00
 2258              	.LASF46:
 2259 0124 4144435F 		.ascii	"ADC_SetGain\000"
 2259      53657447 
 2259      61696E00 
 2260              	.LASF1:
 2261 0130 756E7369 		.ascii	"unsigned char\000"
 2261      676E6564 
 2261      20636861 
 2261      7200
 2262              	.LASF40:
 2263 013e 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2263      53657448 
 2263      6967684C 
 2263      696D6974 
 2263      00
 2264              	.LASF12:
 2265 014f 696E7431 		.ascii	"int16\000"
 2265      3600
 2266              	.LASF5:
 2267 0155 6C6F6E67 		.ascii	"long unsigned int\000"
 2267      20756E73 
 2267      69676E65 
 2267      6420696E 
 2267      7400
 2268              	.LASF13:
 2269 0167 696E7433 		.ascii	"int32\000"
 2269      3200
 2270              	.LASF31:
 2271 016d 4144435F 		.ascii	"ADC_GetResult16\000"
 2271      47657452 
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 57


 2271      6573756C 
 2271      74313600 
 2272              	.LASF36:
 2273 017d 4144435F 		.ascii	"ADC_SetChanMask\000"
 2273      53657443 
 2273      68616E4D 
 2273      61736B00 
 2274              	.LASF43:
 2275 018d 4144435F 		.ascii	"ADC_SetSatMask\000"
 2275      53657453 
 2275      61744D61 
 2275      736B00
 2276              	.LASF30:
 2277 019c 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2277      4973456E 
 2277      64436F6E 
 2277      76657273 
 2277      696F6E00 
 2278              	.LASF16:
 2279 01b0 646F7562 		.ascii	"double\000"
 2279      6C6500
 2280              	.LASF39:
 2281 01b7 6C6F774C 		.ascii	"lowLimit\000"
 2281      696D6974 
 2281      00
 2282              	.LASF47:
 2283 01c0 61646347 		.ascii	"adcGain\000"
 2283      61696E00 
 2284              	.LASF10:
 2285 01c8 75696E74 		.ascii	"uint16\000"
 2285      313600
 2286              	.LASF49:
 2287 01cf 61646343 		.ascii	"adcCounts\000"
 2287      6F756E74 
 2287      7300
 2288              	.LASF11:
 2289 01d9 75696E74 		.ascii	"uint32\000"
 2289      333200
 2290              	.LASF42:
 2291 01e0 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2291      5365744C 
 2291      696D6974 
 2291      4D61736B 
 2291      00
 2292              	.LASF8:
 2293 01f1 756E7369 		.ascii	"unsigned int\000"
 2293      676E6564 
 2293      20696E74 
 2293      00
 2294              	.LASF25:
 2295 01fe 4144435F 		.ascii	"ADC_Enable\000"
 2295      456E6162 
 2295      6C6500
 2296              	.LASF23:
 2297 0209 636F756E 		.ascii	"counts\000"
 2297      747300
 2298              	.LASF7:
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 58


 2299 0210 6C6F6E67 		.ascii	"long long unsigned int\000"
 2299      206C6F6E 
 2299      6720756E 
 2299      7369676E 
 2299      65642069 
 2300              	.LASF34:
 2301 0227 72657375 		.ascii	"result\000"
 2301      6C7400
 2302              	.LASF24:
 2303 022e 4144435F 		.ascii	"ADC_Start\000"
 2303      53746172 
 2303      7400
 2304              	.LASF35:
 2305 0238 4144435F 		.ascii	"ADC_Init\000"
 2305      496E6974 
 2305      00
 2306              	.LASF54:
 2307 0241 766F6C74 		.ascii	"volts\000"
 2307      7300
 2308              	.LASF33:
 2309 0247 6368616E 		.ascii	"chan\000"
 2309      00
 2310              	.LASF50:
 2311 024c 6D566F6C 		.ascii	"mVolts\000"
 2311      747300
 2312              	.LASF20:
 2313 0253 73697A65 		.ascii	"sizetype\000"
 2313      74797065 
 2313      00
 2314              	.LASF51:
 2315 025c 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2315      436F756E 
 2315      7473546F 
 2315      5F75566F 
 2315      6C747300 
 2316              	.LASF53:
 2317 0270 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2317      436F756E 
 2317      7473546F 
 2317      5F566F6C 
 2317      747300
 2318              	.LASF27:
 2319 0283 4144435F 		.ascii	"ADC_StartConvert\000"
 2319      53746172 
 2319      74436F6E 
 2319      76657274 
 2319      00
 2320              	.LASF37:
 2321 0294 6D61736B 		.ascii	"mask\000"
 2321      00
 2322              	.LASF21:
 2323 0299 63684E75 		.ascii	"chNum\000"
 2323      6D00
 2324              	.LASF32:
 2325 029f 7265744D 		.ascii	"retMode\000"
 2325      6F646500 
 2326              	.LASF28:
ARM GAS  C:\Users\MANISH~1\AppData\Local\Temp\ccmYrJB7.s 			page 59


 2327 02a7 4144435F 		.ascii	"ADC_StopConvert\000"
 2327      53746F70 
 2327      436F6E76 
 2327      65727400 
 2328              	.LASF9:
 2329 02b7 75696E74 		.ascii	"uint8\000"
 2329      3800
 2330              	.LASF58:
 2331 02bd 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2331      636F756E 
 2331      74735065 
 2331      72313056 
 2331      6F6C7400 
 2332              	.LASF4:
 2333 02d1 6C6F6E67 		.ascii	"long int\000"
 2333      20696E74 
 2333      00
 2334              	.LASF18:
 2335 02da 63686172 		.ascii	"char\000"
 2335      00
 2336              	.LASF0:
 2337 02df 7369676E 		.ascii	"signed char\000"
 2337      65642063 
 2337      68617200 
 2338              	.LASF56:
 2339 02eb 4144435F 		.ascii	"ADC_initVar\000"
 2339      696E6974 
 2339      56617200 
 2340              	.LASF59:
 2341 02f7 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2341      4320342E 
 2341      382E3420 
 2341      32303134 
 2341      30353236 
 2342 032a 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2342      20726576 
 2342      6973696F 
 2342      6E203231 
 2342      31333538 
 2343 035d 30202D66 		.ascii	"0 -ffunction-sections\000"
 2343      66756E63 
 2343      74696F6E 
 2343      2D736563 
 2343      74696F6E 
 2344              	.LASF17:
 2345 0373 696E7436 		.ascii	"int64\000"
 2345      3400
 2346              	.LASF26:
 2347 0379 4144435F 		.ascii	"ADC_Stop\000"
 2347      53746F70 
 2347      00
 2348              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
